from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from keyboard.inline import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from db import *
from db.xls import *
from strategy_logic.get_all_coins import get_usdt_pairs
import datetime
import asyncio
import random

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ datetime.datetime
from datetime import datetime as dt

from basic.state import *
from config import config
from states import SubscriptionStates, EditDepositPercent, StatPeriodStates, StrategyParamStates, CMParamStates, DivergenceParamStates, RSIParamStates, PumpDumpParamStates
import re
from user_settings import get_user as get_user_db
from user_settings import set_user as set_user_db
from db.orders import ( 
                    get_all_orders,
                    set_user_balance
)
from db.db_select import (get_signal, 
                     get_statistics_for_period, all_signals, count_signals, 
                     get_daily_statistics, all_signals_no_signal, 
                     get_all_intervals_for_pairs_with_status, fetch_signals, fetch_stat,
                     get_signals)

# Replace old imports with new centralized user_settings module
from user_settings import (
    load_user_params, update_user_param, reset_user_params,
    load_cm_settings, reset_cm_settings, update_cm_setting,
    load_divergence_settings, reset_divergence_settings, update_divergence_setting,
    load_rsi_settings, reset_rsi_settings, update_rsi_setting,
    load_trading_settings, load_trading_type_settings, update_trading_type_setting, update_leverage_setting,
    load_pump_dump_settings, reset_pump_dump_settings, update_pump_dump_setting,
    add_subscriber, remove_subscriber, is_subscribed,
    get_user, set_user, update_user_setting,
    add_crypto_pair_to_db, delete_crypto_pair_from_db,
    add_monitor_pair_to_db, delete_monitor_pair_from_db,
    add_subscription, remove_subscription, get_user_subscriptions,
    migrate_user_settings,
    get_user_exchanges, update_user_exchanges, toggle_exchange
)

from strategy_logic.cm_settings import load_cm_settings, update_cm_setting
from strategy_logic.divergence_settings import load_divergence_settings, update_divergence_setting
from strategy_logic.rsi_settings import load_rsi_settings, update_rsi_setting
from strategy_logic.pump_dump_settings import load_pump_dump_settings, update_pump_dump_setting
from user_settings import reset_cm_settings, reset_divergence_settings, reset_rsi_settings, reset_pump_dump_settings
from user_settings import enable_cm_notifications, disable_cm_notifications, is_cm_notifications_enabled
from user_settings import enable_cm_group_notifications, disable_cm_group_notifications, is_cm_group_notifications_enabled

router = Router()


def interval_weight(interval):
    weights = {'1d': 4, '4h': 3, '1h': 2, '30m': 1}
    return weights.get(interval, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω


def split_text_to_chunks(text, chunk_size=4096):
    chunks = []
    while text:
        if len(text) <= chunk_size:
            chunks.append(text)  # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω chunk_size
            break
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        chunk = text[:chunk_size]
        if '\n' in chunk:
            chunk = chunk.rsplit('\n', 1)[0]
        chunks.append(chunk)
        text = text[len(chunk):]  # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    return chunks


def interval_conv(interval):
    if interval == '1D':
        return '1–î'
    elif interval == '4H':
        return '4h'
    elif interval == '1H':
        return '1h'
    elif interval == '30':
        return '30m'
    
def buy_sale(status, interval):
    if status == 'buy':
        return f'üî∞{interval} - B;'
    else:
        return f"üîª{interval} - S;"

def interval_conv(interval):
    if interval == '1D':
        return '1–î'
    elif interval == '4H':
        return '4h'
    elif interval == '1H':
        return '1h'
    elif interval == '30':
        return '30m'
    return interval

def interval_weight(interval):
    weights = {'1D': 4, '4H': 3, '1H': 2, '30': 1}
    return weights.get(interval, 0)

def buy_sale(status, interval):
    if status == 'buy':
        return f'üî∞{interval} - B;'
    else:
        return f'üîª{interval} - S;'


async def format_monitor_signals(callback, user, mes=None):
    forms = await get_signals()
    monitor_pairs = user.get('monitor_pairs', '')  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    print(monitor_pairs)
    if not monitor_pairs:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if mes is None:
            pass
            await callback.message.edit_text(
                text="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                reply_markup=monitor_inline()
            )

        return

    monitor_pairs = monitor_pairs.split(',')  # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º
    filtered_signals = [form for form in forms if form['symbol'] in monitor_pairs]
    print(filtered_signals)
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    grouped_signals = {}
    for form in filtered_signals:
        symbol = form['symbol']
        interval = form['interval']
        status = buy_sale(form['status'], interval_conv(interval))
        if symbol not in grouped_signals:
            grouped_signals[symbol] = []
        grouped_signals[symbol].append({'interval': interval, 'status': status})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    for symbol in grouped_signals:
        grouped_signals[symbol].sort(key=lambda x: interval_weight(x['interval']), reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_parts = []
    for symbol, signals in grouped_signals.items():
        msg_parts.append(f"{symbol} - {''.join(signal['status'] for signal in signals)}")
    
    if not msg_parts:  # –ï—Å–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç
        msg = "–ù–∞ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."
    else:
        msg = "–°–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö:\n\n" + "\n".join(msg_parts)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if mes is None:
        await callback.message.edit_text(
            text=msg,
            reply_markup=monitor_inline()
        )
    else:
        await callback.answer(
            text=msg,
            reply_markup=monitor_inline()
        )

@router.callback_query(F.data.startswith('sub_remove'))
async def process_subscription_removal(callback: CallbackQuery):
    data = callback.data.split()[0].split('_')  # –ù–∞–ø—Ä–∏–º–µ—Ä: "sub_remove_BTCUSDT_1D"
    symbol = data[2]
    interval = data[3]
    group = callback.data.split()[1]
    if group == 'True':
        user_id = config.trading_group_id
    else:
        user_id = callback.from_user.id

    await remove_subscription(user_id, symbol, interval)

    subscriptions = await get_user_subscriptions(user_id)

    if not subscriptions:
        kb = [
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
        ]
        await callback.message.edit_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É.", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for sub in subscriptions:
        symbol = sub.get("symbol")  # –î–æ—Å—Ç–∞–µ–º –ø–æ –∫–ª—é—á—É
        interval = sub.get("interval")

        callback_data = f"sub_remove_{symbol}_{interval} {group}"
        button = InlineKeyboardButton(text=f"‚ùå {symbol} ({interval})", callback_data=callback_data)
        buttons.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    buttons.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'sub start {group}')])
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {symbol} ({interval}).")

@router.message(lambda message: message.text and message.text.lower() == "id")
async def get_group_id_handler(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        await message.reply(f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.")


@router.callback_query(F.data.startswith('sub'))
async def subscribe(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split()[1]
    if action == 'start':
        group = callback.data.split()[2]
        if group == 'True':
            user_id = config.trading_group_id
        else:
            user_id = callback.from_user.id
        subscriptions = await get_user_subscriptions(user_id)
        
        if not subscriptions:
            await callback.message.edit_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É.", reply_markup=subscription_management_inline(group))
            return

        msg = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º:\n\n"
        for sub in subscriptions:
            symbol = sub.get("symbol")  # –î–æ—Å—Ç–∞–µ–º –ø–æ –∫–ª—é—á—É
            interval = sub.get("interval")

            msg += f"üîπ {symbol} (–¢–§ - {interval_conv(interval)})\n"
        
        await callback.message.edit_text(
            text=msg,
            reply_markup=subscription_management_inline(group)
        )

    elif action == 'add':
        group = callback.data.split()[2]
        msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):", reply_markup=close_state())
        await state.set_state(SubscriptionStates.waiting_for_pair)
        await state.update_data(last_msg=msg.message_id, group=group)
    
    elif action == 'del':
        group = callback.data.split()[2]
        if group == 'True':
            user_id = config.trading_group_id
        else:
            user_id = callback.from_user.id

        
        subscriptions = await get_user_subscriptions(user_id)

        if not subscriptions:
            await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
        buttons = []
        for sub in subscriptions:
            symbol = sub.get("symbol")  # –î–æ—Å—Ç–∞–µ–º –ø–æ –∫–ª—é—á—É
            interval = sub.get("interval")

            callback_data = f"sub_remove_{symbol}_{interval} {group}"
            button = InlineKeyboardButton(text=f"‚ùå {symbol} ({interval})", callback_data=callback_data)
            buttons.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        buttons.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'sub start {group}')])
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.message(SubscriptionStates.waiting_for_pair)
async def process_pair_input(message: Message, state: FSMContext, bot: Bot):
    pair = message.text.strip().upper()
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    try:
        await bot.delete_message(message_id=data['last_msg'], chat_id=message.from_user.id)
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–∞—Ä–æ–π
    try:
        await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
    except Exception:
        pass
    
    if pair not in get_usdt_pairs():
        await message.answer("–¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(pair=pair)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", 
        reply_markup=timeframe_inline()
    )
    await state.set_state(SubscriptionStates.waiting_for_timeframe)

@router.callback_query(SubscriptionStates.waiting_for_timeframe)
async def process_timeframe_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    timeframe = callback.data.split('_')[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä: "tf_1D"
    data = await state.get_data()
    await state.clear()
    if data['group'] == 'True':
        user_id = config.trading_group_id
    else:
        user_id = callback.from_user.id
    pair = data.get("pair")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_subscription(user_id, pair, timeframe)
    signal = get_signal(pair, timeframe)
    await callback.message.delete()
    await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–∞—Ä–µ {pair} –¢–§ ({interval_conv(timeframe)}).")

    subscriptions = await get_user_subscriptions(user_id)
    if not subscriptions:
        await callback.message.edit_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É.", reply_markup=subscription_management_inline(data['group']))
        return

    msg = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º:\n\n"
    for sub in subscriptions:
        symbol = sub.get("symbol")  # –î–æ—Å—Ç–∞–µ–º –ø–æ –∫–ª—é—á—É
        interval = sub.get("interval")

        msg += f"üîπ {symbol} (–¢–§ - {interval_conv(interval)})\n"
    
    await callback.message.answer(
        text=msg,
        reply_markup=subscription_management_inline(data['group'])
    )
    await asyncio.sleep(10)
    if signal['symbol'] == 'DOGEUSDT':
        symbol = 'DOGEUSDT üêï'
    else:
        symbol = signal['symbol']

    if signal['status'] == 'buy':
        message = f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_conv(signal['interval'])}\n–°–∏–≥–Ω–∞–ª: Long üî∞"
    else:
        message = f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_conv(signal['interval'])}\n–°–∏–≥–Ω–∞–ª: Short üîª"

    await bot.send_message(chat_id=user_id, text=message)




@router.callback_query(F.data.startswith('like'))
async def like_symbol(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split()[1]
    user = await get_user(callback.from_user.id)
    if action == 'start':
        msg = '–†–∞–∑–¥–µ–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã\n\n'
        if user['crypto_pairs']:
            pairs = user['crypto_pairs'].split(',')
            msg += f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä:\n\n"
            for pair in pairs:
                msg += f"üîπ {pair}\n"
        else:
            msg += '–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞ –ø—É—Å—Ç'
        await callback.message.edit_text(
            text=msg,
            reply_markup=like_inline()
        )
    elif action == 'add':
        msg = '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –ø–∞—Ä—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä: BTCUSDT,EGLDUSDT,XDCUSDT'
        await state.set_state(CryptoPairs.pairs)
        msg = await callback.message.edit_text(
            text=msg,
            reply_markup=close_state()
        )
        await state.update_data(action=action, last_msg=msg.message_id, call='like')

    elif action == 'del':
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=like_del_inline(user)
        )
    elif action == 'delete':
        pair_to_delete = callback.data.split()[2]
        user = await get_user(callback.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_crypto_pair_from_db(callback.from_user.id, pair_to_delete)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–∞—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        await callback.answer(f"–ü–∞—Ä–∞ {pair_to_delete} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user = await get_user(callback.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=like_del_inline(user)
        )



@router.message(CryptoPairs.pairs)
async def add_del_pairs(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    try:
        await bot.delete_message(message_id=data['last_msg'], chat_id=message.from_user.id)
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
    try:
        await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
    except Exception:
        pass
    
    valid_pairs = get_usdt_pairs()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_input = message.text
    pairs = [pair.strip().upper() for pair in user_input.split(',')]  # –†–∞–∑–¥–µ–ª—è–µ–º, –æ—á–∏—â–∞–µ–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã
    invalid_pairs = [pair for pair in pairs if pair not in valid_pairs]
    if invalid_pairs:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(invalid_pairs)}.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã.")
        return

    if not pairs or any(not pair for pair in pairs):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT,ETHUSDT")
        return
    
    if data['action'] == 'add':
        if data['call'] == 'like':
            for pair in pairs:
                await add_crypto_pair_to_db(message.from_user.id, pair)  # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã –≤ –±–∞–∑—É
        else:
            for pair in pairs:
                await add_monitor_pair_to_db(message.from_user.id, pair)  # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã –≤ –±–∞–∑—É

        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä—ã: {', '.join(pairs)}")
    else:
        if data['call'] == 'like':
            for pair in pairs:
                await delete_crypto_pair_from_db(message.from_user.id, pair)  # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—ã –∏–∑ –±–∞–∑—ã
        else:
            for pair in pairs:
                await delete_monitor_pair_from_db(message.from_user.id, pair)  # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—ã –∏–∑ –±–∞–∑—ã
       
        await message.answer(f"–£–¥–∞–ª–µ–Ω—ã –ø–∞—Ä—ã: {', '.join(pairs)}")

    user = await get_user(message.from_user.id)
    if data['call'] == 'like':
        msg = '–†–∞–∑–¥–µ–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã\n\n'
        if user['crypto_pairs']:
            pairs = user['crypto_pairs'].split(',')
            msg += f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä:\n\n"
            for pair in pairs:
                msg += f"üîπ {pair}\n"
        else:
            msg += '–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞ –ø—É—Å—Ç'
        reply_markup=like_inline()
        await message.answer(
        text=msg,
        reply_markup=reply_markup
    )

    else:
        await format_monitor_signals(message, user, True)

    await state.clear()

@router.callback_query(F.data == 'stat data')
async def stat_period_start(callback: CallbackQuery, state: FSMContext):
    kb = [
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]
    ]
    msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(StatPeriodStates.waiting_for_start_date)
    await state.update_data(last_msg=msg.message_id)


@router.message(StatPeriodStates.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext, bot: Bot):
    start_date = message.text
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=data['last_msg'])
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except Exception:
        pass
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        new = dt.strptime(start_date, '%d-%m-%Y')
    except ValueError:
        kb = [
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]
    ]

        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return

    await state.update_data(start_date=start_date)
    kb = [
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]
    ]

    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(StatPeriodStates.waiting_for_end_date)
    await state.update_data(last_msg=msg.message_id)


def plural_form(number, forms):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
    :param number: –ß–∏—Å–ª–æ
    :param forms: –°–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Ñ–æ—Ä–º —Å–ª–æ–≤–∞: ['1 —Å–¥–µ–ª–∫–∞', '2 —Å–¥–µ–ª–∫–∏', '5 —Å–¥–µ–ª–æ–∫']
    :return: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Å–ª–æ–≤–∞
    """
    number = abs(number) % 100
    if 11 <= number <= 19:
        return forms[2]
    number = number % 10
    if number == 1:
        return forms[0]
    if 2 <= number <= 4:
        return forms[1]
    return forms[2]

@router.message(StatPeriodStates.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext, bot: Bot):
    end_date = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    try:
        await bot.delete_message(chat_id=user_id, message_id=data['last_msg'])
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    try:
        await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception:
        pass

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        parsed_date = dt.strptime(end_date, '%d-%m-%Y')
    except ValueError:
        kb = [[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]]
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    start_date = data.get("start_date")
    if not start_date:
        kb = [[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]]
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        parsed_start_date = dt.strptime(start_date, '%d-%m-%Y')
        if parsed_start_date > parsed_date:
            await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
    except ValueError:
        kb = [[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='stat start')]]
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(end_date=end_date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    start_date_str = parsed_start_date.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    end_date_str = parsed_date.strftime('%Y-%m-%d')          # –§–æ—Ä–º–∞—Ç YYYY-MM-DD

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_trades, profitable_trades, loss_trades, total_profit = await get_statistics_for_period(
        user_id, start_date_str, end_date_str
    )

    msg = (
            "üìä –°–¥–µ–ª–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n\n"
            f"‚ôªÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n\n"
            f"üìó –í –ø—Ä–∏–±—ã–ª—å: {profitable_trades} {plural_form(profitable_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ)\n"
            f"üìï –í —É–±—ã—Ç–æ–∫: {loss_trades} {plural_form(loss_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ)\n\n"
            f"–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f}$ üí∞üîã"
        )
    await message.answer(msg)
    await state.clear()

@router.callback_query(F.data.startswith('stat'))
async def statistics(callback: CallbackQuery, state: FSMContext):
    # Parse callback data
    data = callback.data.split()
    action = data[1] if len(data) > 1 else 'start'
    page = int(data[2]) if len(data) > 2 and data[2].isdigit() else 0
    
    if action == 'start':
        # Get daily statistics with corrected profit calculation
        total_trades, profitable_trades, loss_trades, total_profit = await get_daily_statistics(callback.from_user.id)
        
        if total_profit > 0:
            profit_text = f"–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {round(total_profit, 2)}$ üí∞üîã"
        else:
            profit_text = f"–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {round(total_profit, 2)}$ üí∞üîã"
        
        message = f"üìä –°–¥–µ–ª–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å:\n\n" \
                 f"‚ôªÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n\n" \
                 f"üìó –í –ø—Ä–∏–±—ã–ª—å: {profitable_trades} {plural_form(profitable_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])}\n" \
                 f"üìï –í —É–±—ã—Ç–æ–∫: {loss_trades} {plural_form(loss_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])}\n\n" \
                 f"{profit_text}"
        
        await callback.message.edit_text(text=message, reply_markup=stat_inline(profitable_trades, loss_trades), parse_mode='HTML')
    
    elif action == 'all':
        # Pagination for all closed orders
        closed_orders = await get_all_orders(callback.from_user.id, 'close')
        if not closed_orders:
            await callback.message.edit_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.",
                reply_markup=stat_inline()
            )
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
        if page < 0:
            page = 0
        if page >= len(closed_orders):
            page = len(closed_orders) - 1
            
        order = closed_orders[page]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
        buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
        sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = ""
        if isinstance(order.get('sale_time'), str):
            time_str = order['sale_time']
        elif order.get('sale_time') is not None:
            time_str = order['sale_time'].strftime('%d-%m-%Y %H:%M')
        else:
            time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        buy_time_str = ""
        if isinstance(order.get('buy_time'), str):
            buy_time_str = order['buy_time']
        elif order.get('buy_time') is not None:
            buy_time_str = order['buy_time'].strftime('%d-%m-%Y %H:%M')
        else:
            buy_time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        invest_amount = order.get('investment_amount_usdt', 0)
        pnl = order.get('pnl_usdt', sale_price - buy_price)
        is_profit = pnl > 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        trading_type = order.get('trading_type', 'spot').upper()
        leverage = order.get('leverage', 1)
        exchange = order.get('exchange', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
        message = f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {order['symbol']} | {interval_conv(order['interval'])}\n\n"
        message += f"<b>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {round(buy_price, 8)}$ üìà\n"
        message += f"<b>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {round(sale_price, 8)}$ üìà\n"
        
        if is_profit:
            message += f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {abs(round(pnl, 2))}$üí∏üîã\n\n"
        else:
            message += f"<b>–£–±—ã—Ç–æ–∫:</b> {abs(round(pnl, 2))}$ü§ïü™´\n\n"
            
        message += f"<b>–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏:</b> {round(invest_amount, 2)}$ üíµ\n\n"
        message += f"<b>–ë–∏—Ä–∂–∞:</b> {exchange}\n"
        message += f"<b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {trading_type}"
        
        if trading_type == 'FUTURES':
            message += f" (–ø–ª–µ—á–æ: x{leverage})\n\n"
        else:
            message += "\n\n"
        
        message += f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n‚è±Ô∏è{time_str}\n\n"
        message += f"<b>–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞:</b>\n‚è±Ô∏è{buy_time_str}\n"
        
        # Create navigation buttons
        keyboard = []
        if len(closed_orders) > 1:
            row = []
            if page > 0:
                row.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'stat all {page-1}'))
            row.append(InlineKeyboardButton(text=f'{page+1}/{len(closed_orders)}', callback_data='none'))
            if page < len(closed_orders) - 1:
                row.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'stat all {page+1}'))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data='stat start')])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text=message, reply_markup=markup, parse_mode='HTML')
    
    elif action == 'period':
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=stat_period_inline()
        )
    
    elif action.startswith('period_'):
        period_type = action.split('_')[1]
        
        # Calculate start date based on period type
        today = dt.now()
        if period_type == 'week':
            start_date = (today - datetime.timedelta(days=7)).timestamp()
            period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        elif period_type == 'month':
            start_date = (today - datetime.timedelta(days=30)).timestamp()
            period_text = "–∑–∞ –º–µ—Å—è—Ü"
        elif period_type == 'year':
            start_date = (today - datetime.timedelta(days=365)).timestamp()
            period_text = "–∑–∞ –≥–æ–¥"
        else:  # all time
            start_date = 0
            period_text = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
        
        # Get closed orders for the period
        closed_orders = await get_all_orders(callback.from_user.id, 'close', from_date=start_date)
        
        if not closed_orders:
            await callback.message.edit_text(
                text=f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ {period_text}.",
                reply_markup=stat_period_inline()
            )
            return
        
        # Calculate statistics
        total_trades = len(closed_orders)
        profitable_trades = 0
        loss_trades = 0
        total_profit = 0
        
        for order in closed_orders:
            buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
            sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
            invest_amount = order.get('invest_amount', order.get('investment_amount_usdt', 0))
            
            if buy_price and sale_price:
                profit_percent = ((sale_price - buy_price) / buy_price) * 100
                profit_amount = invest_amount * (profit_percent / 100)
                total_profit += profit_amount
                
                if profit_percent > 0:
                    profitable_trades += 1
                else:
                    loss_trades += 1
        
        # Format profit/loss text
        if total_profit > 0:
            profit_text = f"–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {round(total_profit, 2)}$ üí∞üîã"
        else:
            profit_text = f"–ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {round(total_profit, 2)}$ üí∞üîã"
        
        message = f"üìä –°–¥–µ–ª–∫–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º {period_text}:\n\n" \
                 f"‚ôªÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n\n" \
                 f"üìó –í –ø—Ä–∏–±—ã–ª—å: {profitable_trades} {plural_form(profitable_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])}\n" \
                 f"üìï –í —É–±—ã—Ç–æ–∫: {loss_trades} {plural_form(loss_trades, ['—Å–¥–µ–ª–∫–∞', '—Å–¥–µ–ª–∫–∏', '—Å–¥–µ–ª–æ–∫'])}\n\n" \
                 f"{profit_text}"
        
        keyboard = [
            [InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–¥–µ–ª–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥', callback_data=f'stat period_view_{period_type} 0')],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='stat period')]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text=message, reply_markup=markup, parse_mode='HTML')
    
    elif action.startswith('period_view_'):
        period_type = action.split('_')[2]
        
        # Calculate start date based on period type
        today = dt.now()
        if period_type == 'week':
            start_date = (today - datetime.timedelta(days=7)).timestamp()
        elif period_type == 'month':
            start_date = (today - datetime.timedelta(days=30)).timestamp()
        elif period_type == 'year':
            start_date = (today - datetime.timedelta(days=365)).timestamp()
        else:  # all time
            start_date = 0
        
        # Get closed orders for the period
        closed_orders = await get_all_orders(callback.from_user.id, 'close', from_date=start_date)
        
        if not closed_orders:
            await callback.message.edit_text(
                text=f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'stat period_{period_type}')]])
            )
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
        if page < 0:
            page = 0
        if page >= len(closed_orders):
            page = len(closed_orders) - 1
            
        order = closed_orders[page]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
        buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
        sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = ""
        if isinstance(order.get('sale_time'), str):
            time_str = order['sale_time']
        elif order.get('sale_time') is not None:
            time_str = order['sale_time'].strftime('%d-%m-%Y %H:%M')
        else:
            time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        buy_time_str = ""
        if isinstance(order.get('buy_time'), str):
            buy_time_str = order['buy_time']
        elif order.get('buy_time') is not None:
            buy_time_str = order['buy_time'].strftime('%d-%m-%Y %H:%M')
        else:
            buy_time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        invest_amount = order.get('investment_amount_usdt', 0)
        pnl = order.get('pnl_usdt', sale_price - buy_price)
        is_profit = pnl > 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        trading_type = order.get('trading_type', 'spot').upper()
        leverage = order.get('leverage', 1)
        exchange = order.get('exchange', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
        message = f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {order['symbol']} | {interval_conv(order['interval'])}\n\n"
        message += f"<b>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {round(buy_price, 8)}$ üìà\n"
        message += f"<b>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {round(sale_price, 8)}$ üìà\n"
        
        if is_profit:
            message += f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {abs(round(pnl, 2))}$üí∏üîã\n\n"
        else:
            message += f"<b>–£–±—ã—Ç–æ–∫:</b> {abs(round(pnl, 2))}$ü§ïü™´\n\n"
            
        message += f"<b>–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏:</b> {round(invest_amount, 2)}$ üíµ\n\n"
        message += f"<b>–ë–∏—Ä–∂–∞:</b> {exchange}\n"
        message += f"<b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {trading_type}"
        
        if trading_type == 'FUTURES':
            message += f" (–ø–ª–µ—á–æ: x{leverage})\n\n"
        else:
            message += "\n\n"
        
        message += f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n‚è±Ô∏è{time_str}\n\n"
        message += f"<b>–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞:</b>\n‚è±Ô∏è{buy_time_str}\n"
        
        # Create navigation keyboard with back button to period stats
        keyboard = []
        if len(closed_orders) > 1:
            row = []
            if page > 0:
                row.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'stat period_view_{period_type} {page-1}'))
            row.append(InlineKeyboardButton(text=f'{page+1}/{len(closed_orders)}', callback_data='none'))
            if page < len(closed_orders) - 1:
                row.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'stat period_view_{period_type} {page+1}'))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data=f'stat period_{period_type}')])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text=message, reply_markup=markup, parse_mode='HTML')
    
    elif action == 'profit_list' or action == 'loss_list':
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        closed_orders = await get_all_orders(callback.from_user.id, 'close')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º –∏–ª–∏ —É–±—ã—Ç–æ—á–Ω—ã–º
        if action == 'profit_list':
            filtered_orders = []
            for order in closed_orders:
                buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
                sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
                if sale_price > buy_price:
                    filtered_orders.append(order)
            title = "–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö"
        else:  # loss_list
            filtered_orders = []
            for order in closed_orders:
                buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
                sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
                if sale_price < buy_price:
                    filtered_orders.append(order)
            title = "—É–±—ã—Ç–æ—á–Ω—ã—Ö"
        
        if not filtered_orders:
            await callback.message.edit_text(
                text=f"–£ –≤–∞—Å –Ω–µ—Ç {title} —Å–¥–µ–ª–æ–∫.",
                reply_markup=stat_inline()
            )
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
        if page < 0:
            page = 0
        if page >= len(filtered_orders):
            page = len(filtered_orders) - 1
            
        order = filtered_orders[page]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
        buy_price = order.get('coin_buy_price', order.get('buy_price', 0))
        sale_price = order.get('coin_sale_price', order.get('sale_price', 0))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = ""
        if isinstance(order.get('sale_time'), str):
            time_str = order['sale_time']
        elif order.get('sale_time') is not None:
            time_str = order['sale_time'].strftime('%d-%m-%Y %H:%M')
        else:
            time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        buy_time_str = ""
        if isinstance(order.get('buy_time'), str):
            buy_time_str = order['buy_time']
        elif order.get('buy_time') is not None:
            buy_time_str = order['buy_time'].strftime('%d-%m-%Y %H:%M')
        else:
            buy_time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        invest_amount = order.get('investment_amount_usdt', 0)
        pnl = order.get('pnl_usdt', sale_price - buy_price)
        is_profit = pnl > 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        trading_type = order.get('trading_type', 'spot').upper()
        leverage = order.get('leverage', 1)
        exchange = order.get('exchange', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
        message = f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {order['symbol']} | {interval_conv(order['interval'])}\n\n"
        message += f"<b>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {round(buy_price, 8)}$ üìà\n"
        message += f"<b>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {round(sale_price, 8)}$ üìà\n"
        
        if is_profit:
            message += f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {abs(round(pnl, 2))}$üí∏üîã\n\n"
        else:
            message += f"<b>–£–±—ã—Ç–æ–∫:</b> {abs(round(pnl, 2))}$ü§ïü™´\n\n"
            
        message += f"<b>–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏:</b> {round(invest_amount, 2)}$ üíµ\n\n"
        message += f"<b>–ë–∏—Ä–∂–∞:</b> {exchange}\n"
        message += f"<b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {trading_type}"
        
        if trading_type == 'FUTURES':
            message += f" (–ø–ª–µ—á–æ: x{leverage})\n\n"
        else:
            message += "\n\n"
        
        message += f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n‚è±Ô∏è{time_str}\n\n"
        message += f"<b>–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞:</b>\n‚è±Ô∏è{buy_time_str}\n"
        
        # Create navigation buttons
        keyboard = []
        if len(filtered_orders) > 1:
            row = []
            if page > 0:
                row.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'stat {action} {page-1}'))
            row.append(InlineKeyboardButton(text=f'{page+1}/{len(filtered_orders)}', callback_data='none'))
            if page < len(filtered_orders) - 1:
                row.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'stat {action} {page+1}'))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data='stat start')])
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(text=message, reply_markup=markup, parse_mode='HTML')
    
    else:
        await callback.message.edit_text(
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=stat_inline(0, 0)
        )

@router.message(Command("start"))
async def start_message(message: Message, bot: Bot):
    # Run migration at first start - don't await since it's not async
    from db.orders import migrate_strategy_fields
    try:
        await migrate_strategy_fields()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    user_id = message.from_user.id
    
    if not await get_user_db(message.from_user.id):
        await set_user_db(message.from_user.id, 5.0, 50000.0)
        await reset_user_params(message.from_user.id)
    user = await get_user_db(message.from_user.id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted_balance = "{:,}".format(round(user['balance'])).replace(',', ' ')
    
    welcome_message = (
        "üöÄ <b>Moon Bot | CM_Laguerre PPO</b> üöÄ\n\n"
        "ü§ñ –í–∞—à —É–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞\n"
        "üìä <i>PercentileRank Mkt Tops & Bottoms</i>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{formatted_balance}$</code> üí∏\n"
        "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è SPOT –∏ FUTURES\n"
        "üìà –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Long –∏ Short –ø–æ–∑–∏—Ü–∏–π\n"
    )
    
    await message.answer(
        welcome_message,
        reply_markup=start_inline(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == 'close_state')
async def close_state_cal(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
    except Exception:
        pass
    
    user = await get_user_db(callback.from_user.id)
    formatted_balance = "{:,}".format(round(user['balance'])).replace(',', ' ')
    
    welcome_message = (
        "üöÄ <b>Moon Bot | CM_Laguerre PPO</b> üöÄ\n\n"
        "ü§ñ –í–∞—à —É–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞\n"
        "üìä <i>PercentileRank Mkt Tops & Bottoms</i>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{formatted_balance}$</code> üí∏\n"
        "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è SPOT –∏ FUTURES\n"
        "üìà –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Long –∏ Short –ø–æ–∑–∏—Ü–∏–π\n"
    )
    
    await callback.message.edit_text(
        welcome_message,
        reply_markup=start_inline(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == 'start')
async def start_cal(callback: CallbackQuery, state: FSMContext):
    user = await get_user_db(callback.from_user.id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted_balance = "{:,}".format(round(user['balance'])).replace(',', ' ')
    
    welcome_message = (
        "üöÄ <b>Moon Bot | CM_Laguerre PPO</b> üöÄ\n\n"
        "ü§ñ –í–∞—à —É–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞\n"
        "üìä <i>PercentileRank Mkt Tops & Bottoms</i>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{formatted_balance}$</code> üí∏\n"
        "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è SPOT –∏ FUTURES\n"
        "üìà –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Long –∏ Short –ø–æ–∑–∏—Ü–∏–π\n"
    )
    
    await callback.message.edit_text(
        welcome_message,
        reply_markup=start_inline(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith('orders'))
async def orders(callback: CallbackQuery, bot: Bot):
    action = callback.data.split()[1]
    if action == 'start':
        open = len(await get_all_orders(callback.from_user.id, 'open'))
        close = len(await get_all_orders(callback.from_user.id, 'close'))
        await callback.message.edit_text(
            text='–í–∞—à–∏ —Å–¥–µ–ª–∫–∏', 
            reply_markup=orders_inline(open, close)
        )
    elif action == 'all':
        # Get all orders for the user
        open_forms = await get_all_orders(callback.from_user.id, 'open')
        close_forms = await get_all_orders(callback.from_user.id, 'close')
        all_forms = open_forms + close_forms
        
        if not all_forms:
            await callback.message.edit_text(
                text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫',
                reply_markup=orders_inline(len(open_forms), len(close_forms))
            )
            return
        msg = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫:\n\n"
        for i, form in enumerate(all_forms, 1):
            status = "üü¢ –û—Ç–∫—Ä—ã—Ç–∞" if form.get('status') == 'OPEN' else "üî¥ –ó–∞–∫—Ä—ã—Ç–∞"
            profit_loss = ""
            
            # Calculate profit/loss for closed orders
            if form.get('status') == 'CLOSED':
                side = form.get('side', 'LONG')
                buy_price = form.get('coin_buy_price', 0)
                sale_price = form.get('coin_sale_price', 0)
                
                # Different calculation based on position side
                if side == 'LONG':
                    is_profit = sale_price > buy_price
                else:  # SHORT
                    is_profit = sale_price < buy_price
                
                pnl_usdt = form.get('pnl_usdt')
                
                if pnl_usdt is not None and pnl_usdt != 0:
                    # Use pnl_usdt if available
                    if pnl_usdt > 0:
                        profit_loss = f"(+{round(pnl_usdt, 2)}$üí∏)"
                    else:
                        profit_loss = f"({round(pnl_usdt, 2)}$ü§ï)"
                else:
                    # Fallback calculation
                    pnl = abs(sale_price - buy_price)
                    if is_profit:
                        profit_loss = f"(+{round(pnl, 2)}$üí∏)"
                    else:
                        profit_loss = f"(-{round(pnl, 2)}$ü§ï)"
                    
            msg += f"{i}. {form['symbol']} | {interval_conv(form.get('interval', ''))} | {status} {profit_loss}\n"
        chunks = split_text_to_chunks(msg)
        n = int(callback.data.split()[2]) if len(callback.data.split()) > 2 else 0
        
        if n >= len(chunks):
            n = 0
        
        # Create pagination buttons if needed
        kb = []
        if len(chunks) > 1:
            pagination = []
            if n > 0:
                pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders all {n-1}"))
            if n < len(chunks) - 1:
                pagination.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"orders all {n+1}"))
            kb.append(pagination)
            
        # Add back button
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="orders start")])
        
        await callback.message.edit_text(
            text=chunks[n],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    elif action == 'profit' or action == 'loss':
        # Get closed orders
        forms = await get_all_orders(callback.from_user.id, 'close')
        
        # Filter for profit or loss
        if action == 'profit':
            filtered_forms = []
            for form in forms:
                side = form.get('side', 'LONG')
                buy_price = form.get('coin_buy_price', 0)
                sale_price = form.get('coin_sale_price', 0)
                
                # Check if profitable based on position side
                if side == 'LONG' and sale_price > buy_price:
                    filtered_forms.append(form)
                elif side == 'SHORT' and sale_price < buy_price:
                    filtered_forms.append(form)
                elif form.get('pnl_usdt', 0) > 0:
                    filtered_forms.append(form)
                    
            forms = filtered_forms
            title = "–ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö"
        else:  # Loss
            filtered_forms = []
            for form in forms:
                side = form.get('side', 'LONG')
                buy_price = form.get('coin_buy_price', 0)
                sale_price = form.get('coin_sale_price', 0)
                
                # Check if loss based on position side
                if side == 'LONG' and sale_price < buy_price:
                    filtered_forms.append(form)
                elif side == 'SHORT' and sale_price > buy_price:
                    filtered_forms.append(form)
                elif form.get('pnl_usdt', 0) < 0:
                    filtered_forms.append(form)
                    
            forms = filtered_forms
            title = "—É–±—ã—Ç–æ—á–Ω—ã—Ö"
        
        if not forms:
            await callback.message.edit_text(
                text=f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {title} —Å–¥–µ–ª–æ–∫',
                reply_markup=orders_inline(len(await get_all_orders(callback.from_user.id, 'open')), 
                                          len(await get_all_orders(callback.from_user.id, 'close')))
            )
            return
            
        # Create a list of filtered orders
        msg = f"üìã –°–ø–∏—Å–æ–∫ {title} —Å–¥–µ–ª–æ–∫:\n\n"
        
        for i, form in enumerate(forms, 1):
            side = form.get('side', 'LONG')
            buy_price = form.get('coin_buy_price', 0)
            sale_price = form.get('coin_sale_price', 0)
            
            # Get profit/loss display
            pnl_usdt = form.get('pnl_usdt')
            if pnl_usdt is not None:
                if pnl_usdt > 0:
                    profit_text = f"(+{round(pnl_usdt, 2)}$üí∏)"
                else:
                    profit_text = f"({round(pnl_usdt, 2)}$ü§ï)"
            else:
                # Fallback calculation
                if (side == 'LONG' and sale_price > buy_price) or (side == 'SHORT' and sale_price < buy_price):
                    profit = abs(sale_price - buy_price)
                    profit_text = f"(+{round(profit, 2)}$üí∏)"
                else:
                    loss = abs(sale_price - buy_price)
                    profit_text = f"(-{round(loss, 2)}$ü§ï)"
            
            # Format sale time
            sale_time = ""
            if isinstance(form.get('sale_time'), str):
                sale_time = form['sale_time']
            elif form.get('sale_time') is not None:
                sale_time = form['sale_time'].strftime('%d-%m-%Y %H:%M')
            else:
                sale_time = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                
            msg += f"{i}. {form['symbol']} | {interval_conv(form.get('interval', ''))} | {side} | {profit_text} | {sale_time}\n"
        
        # Split message if too long
        chunks = split_text_to_chunks(msg)
        n = int(callback.data.split()[2]) if len(callback.data.split()) > 2 else 0
        
        if n >= len(chunks):
            n = 0
        
        # Create pagination buttons if needed
        kb = []
        if len(chunks) > 1:
            pagination = []
            if n > 0:
                pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders {action} {n-1}"))
            if n < len(chunks) - 1:
                pagination.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"orders {action} {n+1}"))
            kb.append(pagination)
            
        # Add back button
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="orders start")])
        
        await callback.message.edit_text(
            text=chunks[n],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    elif action == 'open' or action == 'close':
        # –ü–∞—Ä—Å–∏–º callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        parts = callback.data.split()
        pair_filter = None
        timeframe_filter = None
        page = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        if len(parts) >= 3:
            if parts[2] == 'pair':
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–µ: orders open pair BTCUSDT [timeframe] [page]
                if len(parts) >= 4:
                    pair_filter = parts[3]
                    if len(parts) >= 5:
                        if parts[4] == 'all':
                            timeframe_filter = 'all'
                            if len(parts) >= 6 and parts[5].isdigit():
                                page = int(parts[5])
                        elif parts[4].isdigit():
                            page = int(parts[4])
                        else:
                            timeframe_filter = parts[4]
                            if len(parts) >= 6 and parts[5].isdigit():
                                page = int(parts[5])
            elif parts[2] == 'all_pairs':
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                timeframe_filter = 'all_pairs'
                if len(parts) >= 4 and parts[3].isdigit():
                    page = int(parts[3])
            elif parts[2].isdigit():
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: orders open 0
                page = int(parts[2])
            else:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É: orders open 1H 0
                timeframe_filter = parts[2]
                if len(parts) >= 4 and parts[3].isdigit():
                    page = int(parts[3])
        
        forms = await get_all_orders(callback.from_user.id, action)
        
        if not forms:
            await callback.message.edit_text(
                text=f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {"–æ—Ç–∫—Ä—ã—Ç—ã—Ö" if action == "open" else "–∑–∞–∫—Ä—ã—Ç—ã—Ö"} —Å–¥–µ–ª–æ–∫',
                reply_markup=orders_inline(len(await get_all_orders(callback.from_user.id, 'open')), 
                                          len(await get_all_orders(callback.from_user.id, 'close')))
            )
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        if pair_filter is None and timeframe_filter is None:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ —Å–¥–µ–ª–æ–∫
            pairs = list(set(form.get('symbol', '') for form in forms if form.get('symbol')))
            pairs.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            
            msg = f"üìã {'–û—Ç–∫—Ä—ã—Ç—ã–µ' if action == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–µ'} —Å–¥–µ–ª–∫–∏\n\n"
            msg += f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(forms)}\n"
            msg += f"–¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(pairs)}\n\n"
            msg += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            
            await callback.message.edit_text(
                text=msg,
                reply_markup=orders_pairs_inline(action, pairs)
            )
            return
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞—Ä–∞, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º
        if pair_filter and timeframe_filter is None:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ
            pair_forms = [form for form in forms if form.get('symbol', '') == pair_filter]
            
            if not pair_forms:
                await callback.message.edit_text(
                    text=f'–£ –≤–∞—Å –Ω–µ—Ç {"–æ—Ç–∫—Ä—ã—Ç—ã—Ö" if action == "open" else "–∑–∞–∫—Ä—ã—Ç—ã—Ö"} —Å–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–µ {pair_filter}',
                    reply_markup=orders_pairs_inline(action, [pair_filter])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            timeframes = list(set(form.get('interval', '') for form in pair_forms if form.get('interval')))
            
            msg = f"üìã {'–û—Ç–∫—Ä—ã—Ç—ã–µ' if action == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–µ'} —Å–¥–µ–ª–∫–∏ | üí± {pair_filter}\n\n"
            msg += f"–°–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–µ: {len(pair_forms)}\n"
            msg += f"–¢–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(timeframes)}\n\n"
            msg += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
            
            await callback.message.edit_text(
                text=msg,
                reply_markup=orders_pair_timeframes_inline(action, pair_filter, timeframes)
            )
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_forms = forms
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–µ
        if pair_filter:
            filtered_forms = [form for form in filtered_forms if form.get('symbol', '') == pair_filter]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if timeframe_filter and timeframe_filter not in ['all', 'all_pairs']:
            filtered_forms = [form for form in filtered_forms if form.get('interval', '') == timeframe_filter]
        
        if not filtered_forms:
            filter_text = ""
            if pair_filter:
                filter_text += f" –ø–æ –ø–∞—Ä–µ {pair_filter}"
            if timeframe_filter and timeframe_filter not in ['all', 'all_pairs']:
                filter_text += f" –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {interval_conv(timeframe_filter)}"
            
            await callback.message.edit_text(
                text=f'–£ –≤–∞—Å –Ω–µ—Ç {"–æ—Ç–∫—Ä—ã—Ç—ã—Ö" if action == "open" else "–∑–∞–∫—Ä—ã—Ç—ã—Ö"} —Å–¥–µ–ª–æ–∫{filter_text}',
                reply_markup=orders_pairs_inline(action, [pair_filter] if pair_filter else None)
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        msg = f"üìã {'–û—Ç–∫—Ä—ã—Ç—ã–µ' if action == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–µ'} —Å–¥–µ–ª–∫–∏"
        if pair_filter:
            msg += f" | üí± {pair_filter}"
        if timeframe_filter and timeframe_filter not in ['all', 'all_pairs']:
            msg += f" | –¢–§: {interval_conv(timeframe_filter)}"
        msg += "\n\n"
        
        for i, form in enumerate(filtered_forms, 1):
            side = form.get('side', 'LONG')
            interval = form.get('interval', '')
            symbol = form.get('symbol', '')
            
            if action == 'open':
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                buy_price = form.get('coin_buy_price', 0)
                buy_time = form.get('buy_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                leverage = form.get('leverage', 1)
                trading_type = form.get('trading_type', 'spot').upper()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
                if isinstance(buy_time, dt):
                    buy_time_str = buy_time.strftime('%d.%m.%Y %H:%M')
                elif isinstance(buy_time, str) and buy_time != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
                        parsed_time = dt.fromisoformat(buy_time.replace('Z', '+00:00'))
                        buy_time_str = parsed_time.strftime('%d.%m.%Y %H:%M')
                    except:
                        buy_time_str = buy_time
                else:
                    buy_time_str = str(buy_time)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                side_emoji = "üü¢" if side == "LONG" else "üî¥"
                lev_info = f" | x{leverage}" if trading_type == 'FUTURES' and leverage > 1 else ""
                
                # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–∞—Ä–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                symbol_display = "" if pair_filter else f"{symbol} | "
                
                msg += f"{i}. {side_emoji} {symbol_display}{interval_conv(interval)}{lev_info}\n"
                msg += f"   üí∞ {round(buy_price, 6)}$ | ‚è∞ {buy_time_str}\n\n"
            else:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–∏–±—ã–ª—å—é/—É–±—ã—Ç–∫–æ–º
                buy_price = form.get('coin_buy_price', 0)
                sale_price = form.get('coin_sale_price', 0)
                sale_time = form.get('sale_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
                if isinstance(sale_time, dt):
                    sale_time_str = sale_time.strftime('%d.%m.%Y %H:%M')
                elif isinstance(sale_time, str) and sale_time != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    try:
                        parsed_time = dt.fromisoformat(sale_time.replace('Z', '+00:00'))
                        sale_time_str = parsed_time.strftime('%d.%m.%Y %H:%M')
                    except:
                        sale_time_str = sale_time
                else:
                    sale_time_str = str(sale_time)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                pnl_usdt = form.get('pnl_usdt')
                if pnl_usdt is not None:
                    if pnl_usdt > 0:
                        profit_loss = f"üíö +{round(pnl_usdt, 2)}$"
                    else:
                        profit_loss = f"‚ù§Ô∏è {round(pnl_usdt, 2)}$"
                else:
                    # Fallback —Ä–∞—Å—á–µ—Ç
                    if (side == 'LONG' and sale_price > buy_price) or (side == 'SHORT' and sale_price < buy_price):
                        profit = abs(sale_price - buy_price)
                        profit_loss = f"üíö +{round(profit, 2)}$"
                    else:
                        loss = abs(sale_price - buy_price)
                        profit_loss = f"‚ù§Ô∏è -{round(loss, 2)}$"
                
                side_emoji = "üü¢" if side == "LONG" else "üî¥"
                
                # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–∞—Ä–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                symbol_display = "" if pair_filter else f"{symbol} | "
                
                msg += f"{i}. {side_emoji} {symbol_display}{interval_conv(interval)}\n"
                msg += f"   {profit_loss} | ‚è∞ {sale_time_str}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        chunks = split_text_to_chunks(msg)
        
        if page >= len(chunks):
            page = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        kb = []
        if len(chunks) > 1:
            pagination = []
            if page > 0:
                if pair_filter and timeframe_filter:
                    pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"orders {action} pair {pair_filter} {timeframe_filter} {page-1}"))
                elif pair_filter:
                    pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"orders {action} pair {pair_filter} {page-1}"))
                elif timeframe_filter:
                    pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"orders {action} {timeframe_filter} {page-1}"))
                else:
                    pagination.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"orders {action} {page-1}"))
            
            pagination.append(InlineKeyboardButton(text=f"{page+1}/{len(chunks)}", callback_data="ignore"))
            
            if page < len(chunks) - 1:
                if pair_filter and timeframe_filter:
                    pagination.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"orders {action} pair {pair_filter} {timeframe_filter} {page+1}"))
                elif pair_filter:
                    pagination.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"orders {action} pair {pair_filter} {page+1}"))
                elif timeframe_filter:
                    pagination.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"orders {action} {timeframe_filter} {page+1}"))
                else:
                    pagination.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"orders {action} {page+1}"))
            kb.append(pagination)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        if pair_filter:
            if timeframe_filter and timeframe_filter not in ['all', 'all_pairs']:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –¢–§ —ç—Ç–æ–π –ø–∞—Ä—ã
                control_buttons.append(InlineKeyboardButton(text="üîÑ –í—Å–µ –¢–§", callback_data=f"orders {action} pair {pair_filter} all 0"))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            control_buttons.append(InlineKeyboardButton(text="üîÑ –í—Å–µ –ø–∞—Ä—ã", callback_data=f"orders {action}"))
        else:
            if timeframe_filter and timeframe_filter not in ['all', 'all_pairs']:
                control_buttons.append(InlineKeyboardButton(text="üîÑ –í—Å–µ –¢–§", callback_data=f"orders {action} all_pairs 0"))
            control_buttons.append(InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data=f"orders {action}"))
        
        if control_buttons:
            kb.append(control_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if pair_filter:
            kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º", callback_data=f"orders {action}")])
        else:
            kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="orders start")])
        
        await callback.message.edit_text(
            text=chunks[page],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    else:
        # For individual order view
        forms = await get_all_orders(callback.from_user.id, action)
        n = int(callback.data.split()[2])
        if n < 0:
            await callback.answer('–≠—Ç–æ –Ω–∞—á–∞–ª–æ')
            return
        if n >= len(forms):
            await callback.answer('–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞')
            return

        form = forms[n]
        side = form.get('side', 'LONG')
        symbol = form.get('symbol', '')
        interval = form.get('interval', '')
        trading_type = form.get('trading_type', 'spot').upper()
        leverage = form.get('leverage', 1)
        exchange = form.get('exchange', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # Prepare detailed order view message
        msg = f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {symbol} | {interval_conv(interval)}\n"
        msg += f"<b>–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:</b> {side}\n\n"
        msg += f"<b>–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {round(form.get('coin_buy_price', 0), 8)}$ üìà\n"

        if action == 'open':
            # Display open position details
            investment = form.get('investment_amount_usdt', 0)
            msg += f"<b>–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏:</b> {round(investment, 2)}$ üíµ\n\n"
            msg += f"<b>–ë–∏—Ä–∂–∞:</b> {exchange}\n"
            msg += f"<b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {trading_type}"
            if trading_type == 'FUTURES' and leverage > 1:
                msg += f" (–ø–ª–µ—á–æ: x{leverage})\n\n"
            else:
                msg += "\n\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            buy_time = form.get('buy_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if isinstance(buy_time, dt):
                buy_time_str = buy_time.strftime('%d.%m.%Y %H:%M')
            elif isinstance(buy_time, str) and buy_time != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                try:
                    parsed_time = dt.fromisoformat(buy_time.replace('Z', '+00:00'))
                    buy_time_str = parsed_time.strftime('%d.%m.%Y %H:%M')
                except:
                    buy_time_str = buy_time
            else:
                buy_time_str = str(buy_time)
            
            msg += f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è:</b>\n‚è±Ô∏è {buy_time_str}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            strategies_info = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if form.get('price_action_active'):
                pattern = form.get('price_action_pattern', '')
                strategies_info.append(f"‚úÖ Price Action {pattern}".strip())
            else:
                strategies_info.append("‚ùå Price Action")
                
            if form.get('cm_active'):
                strategies_info.append("‚úÖ CM")
            else:
                strategies_info.append("‚ùå CM")
                
            if form.get('moonbot_active'):
                strategies_info.append("‚úÖ MoonBot")
            else:
                strategies_info.append("‚ùå MoonBot")
                
            if form.get('rsi_active'):
                strategies_info.append("‚úÖ RSI")
            else:
                strategies_info.append("‚ùå RSI")
                
            if form.get('divergence_active'):
                div_type = form.get('divergence_type', '')
                strategies_info.append(f"‚úÖ Divergence {div_type}".strip())
            else:
                strategies_info.append("‚ùå Divergence")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            if any(strategies_info):
                msg += f"\n<b>‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º —Å:</b>\n"
                msg += "\n".join(strategies_info) + "\n"
        else:
            # Display closed position details
            sale_price = form.get('coin_sale_price', 0)
            msg += f"<b>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {round(sale_price, 8)}$ üìà\n"

            # Calculate and display PnL
            pnl = form.get('pnl_usdt')
            if pnl is not None:
                if pnl > 0:
                    msg += f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {round(abs(pnl), 2)}$ üíö\n\n"
                else:
                    msg += f"<b>–£–±—ã—Ç–æ–∫:</b> {round(abs(pnl), 2)}$ ‚ù§Ô∏è\n\n"
            else:
                # Fallback calculation
                buy_price = form.get('coin_buy_price', 0)
                if (side == 'LONG' and sale_price > buy_price) or (side == 'SHORT' and sale_price < buy_price):
                    profit = abs(sale_price - buy_price)
                    msg += f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {round(profit, 2)}$ üíö\n\n"
                else:
                    loss = abs(sale_price - buy_price)
                    msg += f"<b>–£–±—ã—Ç–æ–∫:</b> {round(loss, 2)}$ ‚ù§Ô∏è\n\n"

            # Add investment amount
            investment = form.get('investment_amount_usdt', 0)
            msg += f"<b>–û–±—ä–µ–º —Å–¥–µ–ª–∫–∏:</b> {round(investment, 2)}$ üíµ\n\n"
            
            # Add trading details
            msg += f"<b>–ë–∏—Ä–∂–∞:</b> {exchange}\n"
            msg += f"<b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {trading_type}"
            if trading_type == 'FUTURES' and leverage > 1:
                msg += f" (–ø–ª–µ—á–æ: x{leverage})\n\n"
            else:
                msg += "\n\n"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
            sale_time = form.get('sale_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if isinstance(sale_time, dt):
                sale_time_str = sale_time.strftime('%d.%m.%Y %H:%M')
            elif isinstance(sale_time, str) and sale_time != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                try:
                    parsed_time = dt.fromisoformat(sale_time.replace('Z', '+00:00'))
                    sale_time_str = parsed_time.strftime('%d.%m.%Y %H:%M')
                except:
                    sale_time_str = sale_time
            else:
                sale_time_str = str(sale_time)
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            buy_time = form.get('buy_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if isinstance(buy_time, dt):
                buy_time_str = buy_time.strftime('%d.%m.%Y %H:%M')
            elif isinstance(buy_time, str) and buy_time != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                try:
                    parsed_time = dt.fromisoformat(buy_time.replace('Z', '+00:00'))
                    buy_time_str = parsed_time.strftime('%d.%m.%Y %H:%M')
                except:
                    buy_time_str = buy_time
            else:
                buy_time_str = str(buy_time)
                
            msg += f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n‚è±Ô∏è {sale_time_str}\n\n"
            msg += f"<b>–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞:</b>\n‚è±Ô∏è {buy_time_str}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            strategies_info = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if form.get('price_action_active'):
                pattern = form.get('price_action_pattern', '')
                strategies_info.append(f"‚úÖ Price Action {pattern}".strip())
            else:
                strategies_info.append("‚ùå Price Action")
                
            if form.get('cm_active'):
                strategies_info.append("‚úÖ CM")
            else:
                strategies_info.append("‚ùå CM")
                
            if form.get('moonbot_active'):
                strategies_info.append("‚úÖ MoonBot")
            else:
                strategies_info.append("‚ùå MoonBot")
                
            if form.get('rsi_active'):
                strategies_info.append("‚úÖ RSI")
            else:
                strategies_info.append("‚ùå RSI")
                
            if form.get('divergence_active'):
                div_type = form.get('divergence_type', '')
                strategies_info.append(f"‚úÖ Divergence {div_type}".strip())
            else:
                strategies_info.append("‚ùå Divergence")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            if any(strategies_info):
                msg += f"\n<b>‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º —Å:</b>\n"
                msg += "\n".join(strategies_info) + "\n"

        await callback.message.edit_text(
            text=msg,
            reply_markup=orders_inline_n(n, action, len(forms), "orders"),
            parse_mode="HTML"
        )


async def split_message_and_edit(bot_message, text, reply_markup=None):
    while len(text) > 4096:
        chunk = text[:4096].rsplit('\n', 1)[0]  # –†–∞–∑–±–∏—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        await bot_message.edit_text(text=chunk)
        text = text[len(chunk):]
    await bot_message.edit_text(text=text, reply_markup=reply_markup)


@router.callback_query(F.data.startswith('signals'))
async def signals(callback: CallbackQuery, bot: Bot):
    action = callback.data.split()[1]
    if action == 'start':
        sale = await count_signals('sale')
        buy = await count_signals('buy')
        # forms = all_signals_no_signal()
        # old_symbol = 'start'
        # msg_parts = []
        # for form in forms:
        #     if old_symbol != form['symbol']:
        #         if old_symbol == 'start':
        #             msg_parts.append(f"{form['symbol']} - {buy_sale(form['status'], interval_conv(form['interval']))}")
        #         else:
        #             msg_parts.append(f"\n{form['symbol']} - {buy_sale(form['status'], interval_conv(form['interval']))}")
        #         old_symbol = form['symbol']
        #     else:
        #         msg_parts.append(buy_sale(form['status'], interval_conv(form['interval'])))
        #         old_symbol = form['symbol']

        # msg = "".join(msg_parts)
        # await split_message_and_edit(callback.message, msg, signals_inline(buy, sale))
        await callback.message.edit_text(
            text='–°–∏–≥–Ω–∞–ª—ã', 
            reply_markup=signals_inline(buy, sale)
        )
    else:
        interval = action.split('_')[1]
        action = action.split('_')[0]
        if interval == 's':
            n = int(callback.data.split()[0].split('_')[1])
            if n < 0:
                await callback.answer('–≠—Ç–æ –Ω–∞—á–∞–ª–æ')
                return

            if action == 'buy':
                forms = await all_signals_no_signal()
            else:
                forms = await get_all_intervals_for_pairs_with_status(action)
            grouped_signals = {}

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–º–≤–æ–ª—É
            INTERVAL_ORDER = {'1d': 1, '4h': 2, '1h': 3, '30m': 4}  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–º–≤–æ–ª—É
            for form in forms:
                symbol = form['symbol']
                interval = form['interval']
                status = buy_sale(form['status'], interval_conv(interval))
                if symbol not in grouped_signals:
                    grouped_signals[symbol] = []
                grouped_signals[symbol].append({'interval': interval, 'status': status})

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (1d ‚Üí 4h ‚Üí 1h ‚Üí 30m)
            for symbol in grouped_signals:
                grouped_signals[symbol].sort(key=lambda x: INTERVAL_ORDER[x['interval']])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
            msg_parts = []
            for symbol, signals in grouped_signals.items():
                msg_parts.append(f"{symbol} - {''.join(signal['status'] for signal in signals)}")

            msg = "\n".join(msg_parts)
            chunks = split_text_to_chunks(msg)
            await callback.message.edit_text(
                text=chunks[n],
                reply_markup=interval_inline(action, n,len(chunks))
            )
            # await split_message_and_edit(callback.message, msg, interval_inline(action, 0))

            # await callback.message.edit_text(
            #     text=msg,
            #     reply_markup=interval_inline(action)
            # )
        else:
            n_back = int(callback.data.split()[0].split('_')[1])

            n = int(callback.data.split()[2])
            if n < 0:
                await callback.answer('–≠—Ç–æ –Ω–∞—á–∞–ª–æ')
                return

            forms = await all_signals(action, interval)
            # form = forms[n]
            if action == 'sale':
                signal = '–ø—Ä–æ–¥–∞–∂—É'
            else:
                signal = '–ø–æ–∫—É–ø–∫—É'
            msg = f"–°–∏–≥–Ω–∞–ª –Ω–∞ {signal}\n"
            # msg += f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {form['symbol']}\n"
            msg += f"–¢–§: {interval_conv(interval)}\n"
            for form in forms:
                msg += f"{form['symbol']} - {buy_sale(action, interval)}\n"
            # msg += f"–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É: {form['buy_price']}\n"
            # msg += f"–¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É {form['sale_price']}"
            chunks = split_text_to_chunks(msg)
            await callback.message.edit_text(
                text=chunks[n],
                reply_markup=signals_inline_n(action, len(chunks), n_back, interval, n )
            )
            # await split_message_and_edit(callback.message, msg, signals_inline_n(action))
    
            # await callback.message.edit_text(
            #     text=msg,
            #     reply_markup=signals_inline_n(action)
            # )

@router.callback_query(F.data.startswith("table"))
async def table(callback: CallbackQuery, bot: Bot):
    action = callback.data.split()[1]
    if action == 'signals':
        columns, data = await fetch_signals()

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        file_name = create_xls(columns, data, file_name="signals.xlsx", translate_columns=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
        xls_file = FSInputFile(file_name)  # –°–æ–∑–¥–∞–µ–º FSInputFile —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É

        with open(file_name, 'rb') as file:
            await bot.send_document(chat_id=callback.from_user.id, document=xls_file, caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ üìÑ")

    elif action == 'stat':
        columns, data = await fetch_stat(callback.from_user.id)

        if not data:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        file_name = create_xls(columns, data, file_name="orders_stat.xlsx", translate_columns=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
        xls_file = FSInputFile(file_name)

        with open(file_name, 'rb') as file:
            await bot.send_document(chat_id=callback.from_user.id, document=xls_file, caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å–æ —Å–¥–µ–ª–∫–∞–º–∏ üìÑ")


@router.callback_query(F.data.startswith('monitor'))
async def monitoring(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split()[1]
    user = await get_user(callback.from_user.id)
    if action == 'start':
        await format_monitor_signals(callback, user)
    elif action == 'del':
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=monitor_del_inline(user)
        )
    elif action == 'delete':
        pair_to_delete = callback.data.split()[2]
        user = await get_user(callback.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await delete_monitor_pair_from_db(callback.from_user.id, pair_to_delete)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–∞—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        await callback.answer(f"–ü–∞—Ä–∞ {pair_to_delete} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user = await get_user(callback.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=monitor_del_inline(user)
        )

    else:
        msg = '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –ø–∞—Ä—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä: BTCUSDT,EGLDUSDT,XDCUSDT'
        await state.set_state(CryptoPairs.pairs)
        msg = await callback.message.edit_text(
            text=msg,
            reply_markup=close_state()
        )
        await state.update_data(action=action, last_msg=msg.message_id, call='monitor')


def settings_inline():
    kb = [
        [InlineKeyboardButton(text='üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='settings set_balance')], # New button
        [InlineKeyboardButton(text='üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è', callback_data='settings percent')],
        [InlineKeyboardButton(text='üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è Moon Bot', callback_data='settings strategy')],
        [InlineKeyboardButton(text='üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ CM', callback_data='settings cm')],
        [InlineKeyboardButton(text='üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏', callback_data='settings divergence')],
        [InlineKeyboardButton(text='üìâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ RSI', callback_data='settings rsi')],
        [InlineKeyboardButton(text='üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ P/D –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞', callback_data='settings pump_dump')],
        [InlineKeyboardButton(text='üí± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏', callback_data='settings trading')],
        [InlineKeyboardButton(text='üèõÔ∏è –í—ã–±–æ—Ä –±–∏—Ä–∂', callback_data='settings exchanges')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.callback_query(F.data.startswith('settings'))
async def settings(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split()[1] if len(callback.data.split()) > 1 else 'start'
    if action == 'start':
        await callback.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=settings_inline()
        )
    elif action == 'set_balance': # New action handler
        msg = await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000.50):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings start')]
            ])
        )
        await state.set_state(SetBalanceStates.waiting_for_balance) # Use the existing state
        await state.update_data(last_msg=msg.message_id)
    elif action == 'percent':
        msg = await callback.message.edit_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏.\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É –±—É–¥–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å—Å—è 5% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0 –¥–æ 100):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings start')]
            ])
        )
        await state.set_state(EditDepositPercent.new)
        await state.update_data(last_msg=msg.message_id)
    elif action == 'strategy':
        user_params = load_user_params(callback.from_user.id)
        text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üí∞ –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {user_params['OrderSize']} USDT\n"
        text += f"üìà Take Profit: {user_params['TakeProfit']}%\n"
        text += f"üìâ Stop Loss: {user_params['StopLoss']}%\n"
        text += f"üìä –ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MinVolume']}\n"
        text += f"üìä –ú–∞–∫—Å. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MaxVolume']}\n"
        text += f"üïê –ú–∏–Ω. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MinHourlyVolume']}\n"
        text += f"üïê –ú–∞–∫—Å. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MaxHourlyVolume']}\n"
        text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 3—á: {user_params['Delta_3h_Max']}%\n"
        text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 24—á: {user_params['Delta_24h_Max']}%\n"
        text += f"‚ö° –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 5–º: {user_params['Delta2_Max']}%\n"
        text += f"‚Çø BTC –º–∏–Ω. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Min']}%\n"
        text += f"‚Çø BTC –º–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Max']}%\n"
        
        # Convert blacklist set to string
        blacklist = user_params.get('CoinsBlackList', set())
        blacklist_str = ", ".join(sorted(blacklist)) if blacklist else "–ø—É—Å—Ç–æ"
        text += f"‚õî –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_str}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        await callback.message.edit_text(
            text=text,
            reply_markup=strategy_params_inline()
        )
    elif action == 'cm':
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cm_settings = load_cm_settings(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        is_enabled = await is_cm_notifications_enabled(callback.from_user.id)
        is_group_enabled = await is_cm_group_notifications_enabled()
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ CM (Congestion Measure)\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CM
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üìà Take Profit: {cm_settings.get('TakeProfit', 3.0)}%\n"
        text += f"üìâ Stop Loss: {cm_settings.get('StopLoss', -1.5)}%\n"
        text += f"SHORT_GAMMA: {cm_settings['SHORT_GAMMA']:.2f}\n"
        text += f"LONG_GAMMA: {cm_settings['LONG_GAMMA']:.2f}\n"
        text += f"LOOKBACK_T: {cm_settings['LOOKBACK_T']}\n"
        text += f"LOOKBACK_B: {cm_settings['LOOKBACK_B']}\n"
        text += f"PCTILE: {cm_settings['PCTILE']}\n\n"
        
        # –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text += f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è CM –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if is_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è CM –≤ –≥—Ä—É–ø–ø—É: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if is_group_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=cm_params_inline()
        )
    elif action == 'divergence':
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        divergence_settings = load_divergence_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ (RSI)\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üìà Take Profit: {divergence_settings.get('TakeProfit', 3.0)}%\n"
        text += f"üìâ Stop Loss: {divergence_settings.get('StopLoss', -1.5)}%\n"
        text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\n"
        text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\n"
        text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\n"
        text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\n"
        text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\n"
        text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\n"
        text += f"STOP_LOSS_TYPE: {divergence_settings['STOP_LOSS_TYPE']}\n"
        text += f"STOP_LOSS_PERC: {divergence_settings['STOP_LOSS_PERC']}\n"
        text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\n"
        text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=divergence_params_inline()
        )
    elif action == 'rsi':
        # Load RSI indicator settings for the user
        rsi_settings = load_rsi_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ RSI\n\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üìà Take Profit: {rsi_settings.get('TakeProfit', 3.0)}%\n"
        text += f"üìâ Stop Loss: {rsi_settings.get('StopLoss', -1.5)}%\n"
        text += f"RSI_PERIOD: {rsi_settings['RSI_PERIOD']}\n"
        text += f"RSI_OVERBOUGHT: {rsi_settings['RSI_OVERBOUGHT']}\n"
        text += f"RSI_OVERSOLD: {rsi_settings['RSI_OVERSOLD']}\n"
        text += f"EMA_FAST: {rsi_settings['EMA_FAST']}\n"
        text += f"EMA_SLOW: {rsi_settings['EMA_SLOW']}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=rsi_params_inline()
        )
    elif action == 'pump_dump':
        # Load pump_dump detector settings for the user
        pump_dump_settings = load_pump_dump_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pump/Dump –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞\n\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üìà Take Profit: {pump_dump_settings.get('TakeProfit', 3.0)}%\n"
        text += f"üìâ Stop Loss: {pump_dump_settings.get('StopLoss', -1.5)}%\n"
        text += f"VOLUME_THRESHOLD: {pump_dump_settings['VOLUME_THRESHOLD']:.1f}x\n"
        text += f"PRICE_CHANGE_THRESHOLD: {pump_dump_settings['PRICE_CHANGE_THRESHOLD']:.1f}%\n"
        text += f"TIME_WINDOW: {pump_dump_settings['TIME_WINDOW']} –º–∏–Ω—É—Ç\n"
        text += f"MONITOR_INTERVALS: {', '.join(pump_dump_settings['MONITOR_INTERVALS'])}\n"
        text += f"ENABLED: {'–í–∫–ª—é—á–µ–Ω–æ' if pump_dump_settings['ENABLED'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
        
        # Show subscription status
        is_subbed = is_subscribed(callback.from_user.id)
        text += f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–ü–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ' if is_subbed else '–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚ùå'}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:"
        
        # Create combined inline keyboard with settings and subscription options
        kb = [
            [InlineKeyboardButton(text='VOLUME_THRESHOLD', callback_data='pump_dump VOLUME_THRESHOLD')],
            [InlineKeyboardButton(text='PRICE_CHANGE_THRESHOLD', callback_data='pump_dump PRICE_CHANGE_THRESHOLD')],
            [InlineKeyboardButton(text='TIME_WINDOW', callback_data='pump_dump TIME_WINDOW')],
            [InlineKeyboardButton(text='MONITOR_INTERVALS', callback_data='pump_dump MONITOR_INTERVALS')],
            [InlineKeyboardButton(text='ENABLED', callback_data='pump_dump ENABLED')],
            [InlineKeyboardButton(text='–°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º', callback_data='pump_dump reset')],
            [InlineKeyboardButton(
                text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' if is_subbed else '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 
                callback_data='pump_dump unsubscribe' if is_subbed else 'pump_dump subscribe'
            )],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings start')]
        ]
        
        await callback.message.edit_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    elif action == 'trading':
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ settings_trading
        await settings_trading(callback)
    elif action == 'exchanges':
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_exchanges_settings
        await show_exchanges_settings(callback)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await callback.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=settings_inline()
        )

@router.callback_query(F.data.startswith('strategy'))
async def strategy_params(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split()[1]
    if action == 'reset':
        await reset_user_params(callback.from_user.id)
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
        
        # Get the default parameters
        default_params = load_user_params(callback.from_user.id)
        
        text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
        text += "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.\n\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"üí∞ –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {default_params['OrderSize']} USDT\n"
        text += f"üìà Take Profit: {default_params['TakeProfit']}%\n"
        text += f"üìâ Stop Loss: {default_params['StopLoss']}%\n"
        text += f"üìä –ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {default_params['MinVolume']}\n"
        text += f"üìä –ú–∞–∫—Å. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {default_params['MaxVolume']}\n"
        text += f"üïê –ú–∏–Ω. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {default_params['MinHourlyVolume']}\n"
        text += f"üïê –ú–∞–∫—Å. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {default_params['MaxHourlyVolume']}\n"
        text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 3—á: {default_params['Delta_3h_Max']}%\n"
        text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 24—á: {default_params['Delta_24h_Max']}%\n"
        text += f"‚ö° –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 5–º: {default_params['Delta2_Max']}%\n"
        text += f"‚Çø BTC –º–∏–Ω. –¥–≤–∏–∂–µ–Ω–∏–µ: {default_params['Delta_BTC_Min']}%\n"
        text += f"‚Çø BTC –º–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ: {default_params['Delta_BTC_Max']}%\n"
        
        # Convert blacklist set to string
        blacklist = default_params.get('CoinsBlackList', set())
        blacklist_str = ", ".join(sorted(blacklist)) if blacklist else "–ø—É—Å—Ç–æ"
        text += f"‚õî –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_str}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=strategy_params_inline()
        )
    elif action in ['OrderSize', 'TakeProfit', 'StopLoss', 'MinVolume', 'MaxVolume', 'MinHourlyVolume', 'MaxHourlyVolume', 'Delta_3h_Max', 'Delta_24h_Max', 'Delta2_Max', 'Delta_BTC_Min', 'Delta_BTC_Max']:
        user_params = load_user_params(callback.from_user.id)
        current_value = user_params.get(action, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        kb = [
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings strategy')]
        ]
        msg = await callback.message.edit_text(
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {action}\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        await state.set_state(StrategyParamStates.edit_param)
        await state.update_data(param_name=action, last_msg=msg.message_id)
    elif action == 'CoinsBlackList':
        user_params = load_user_params(callback.from_user.id)
        blacklist = user_params.get('CoinsBlackList', set())
        blacklist_str = ", ".join(sorted(blacklist)) if blacklist else "–ø—É—Å—Ç–æ"
        kb = [
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings strategy')]
        ]
        msg = await callback.message.edit_text(
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç\n"
            f"–¢–µ–∫—É—â–∏–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_str}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC,ETH,XRP):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        await state.set_state(StrategyParamStates.edit_blacklist)
        await state.update_data(last_msg=msg.message_id)

@router.message(StrategyParamStates.edit_param)
async def process_param_edit(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    param_name = data.get('param_name')
    
    try:
        # Delete the previous message
        try:
            await bot.delete_message(message_id=data.get('last_msg'), chat_id=message.from_user.id)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        try:
            await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
        except Exception:
            pass
        
        # Convert input to proper type
        param_value = float(message.text.strip())
        
        # Update parameter
        success = await update_user_param(message.from_user.id, param_name, param_value)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_msg = await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {param_value}")
            
            # Get updated parameters
            user_params = load_user_params(message.from_user.id)
            
            text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
            
            # Display current parameters
            text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            text += f"üí∞ –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {user_params['OrderSize']} USDT\n"
            text += f"üìà Take Profit: {user_params['TakeProfit']}%\n"
            text += f"üìâ Stop Loss: {user_params['StopLoss']}%\n"
            text += f"üìä –ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MinVolume']}\n"
            text += f"üìä –ú–∞–∫—Å. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MaxVolume']}\n"
            text += f"üïê –ú–∏–Ω. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MinHourlyVolume']}\n"
            text += f"üïê –ú–∞–∫—Å. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MaxHourlyVolume']}\n"
            text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 3—á: {user_params['Delta_3h_Max']}%\n"
            text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 24—á: {user_params['Delta_24h_Max']}%\n"
            text += f"‚ö° –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 5–º: {user_params['Delta2_Max']}%\n"
            text += f"‚Çø BTC –º–∏–Ω. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Min']}%\n"
            text += f"‚Çø BTC –º–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Max']}%\n"
            
            # Convert blacklist set to string
            blacklist = user_params.get('CoinsBlackList', set())
            blacklist_str = ", ".join(sorted(blacklist)) if blacklist else "–ø—É—Å—Ç–æ"
            text += f"‚õî –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_str}\n\n"
            
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            
            # Show settings menu again with current parameters
            await message.answer(
                text=text,
                reply_markup=strategy_params_inline()
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            try:
                await bot.delete_message(message_id=success_msg.message_id, chat_id=message.from_user.id)
            except Exception:
                pass
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}")
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=strategy_params_inline()
            )
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings strategy')]
            ])
        )
    
    await state.clear()

@router.message(StrategyParamStates.edit_blacklist)
async def process_blacklist_edit(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    try:
        # Delete the previous message
        try:
            await bot.delete_message(message_id=data.get('last_msg'), chat_id=message.from_user.id)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        try:
            await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
        except Exception:
            pass
        
        # Process blacklist input
        blacklist_str = message.text.strip().upper()
        
        # Update parameter
        success = await update_user_param(message.from_user.id, 'CoinsBlackList', blacklist_str)
        
        if success:
            success_msg = await message.answer("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # Get updated parameters
            user_params = load_user_params(message.from_user.id)
            
            text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
            
            # Display current parameters
            text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            text += f"üí∞ –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {user_params['OrderSize']} USDT\n"
            text += f"üìà Take Profit: {user_params['TakeProfit']}%\n"
            text += f"üìâ Stop Loss: {user_params['StopLoss']}%\n"
            text += f"üìä –ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MinVolume']}\n"
            text += f"üìä –ú–∞–∫—Å. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {user_params['MaxVolume']}\n"
            text += f"üïê –ú–∏–Ω. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MinHourlyVolume']}\n"
            text += f"üïê –ú–∞–∫—Å. —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º: {user_params['MaxHourlyVolume']}\n"
            text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 3—á: {user_params['Delta_3h_Max']}%\n"
            text += f"üìà –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 24—á: {user_params['Delta_24h_Max']}%\n"
            text += f"‚ö° –ú–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞ 5–º: {user_params['Delta2_Max']}%\n"
            text += f"‚Çø BTC –º–∏–Ω. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Min']}%\n"
            text += f"‚Çø BTC –º–∞–∫—Å. –¥–≤–∏–∂–µ–Ω–∏–µ: {user_params['Delta_BTC_Max']}%\n"
            
            # Convert blacklist set to string
            blacklist = user_params.get('CoinsBlackList', set())
            blacklist_str = ", ".join(sorted(blacklist)) if blacklist else "–ø—É—Å—Ç–æ"
            text += f"‚õî –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_str}\n\n"
            
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            
            # Show settings menu again with current parameters
            await message.answer(
                text=text,
                reply_markup=strategy_params_inline()
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            try:
                await bot.delete_message(message_id=success_msg.message_id, chat_id=message.from_user.id)
            except Exception:
                pass
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç")
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Moon Bot\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=strategy_params_inline()
            )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings strategy')]
            ])
        )
    
    await state.clear()

@router.callback_query(F.data == 'close_state')
async def close_state_cal(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
    except Exception:
        pass
    await callback.message.edit_text(
        '–ë–æ—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ CM_Laguerre PPO PercentileRank Mkt Tops & Bottoms',
        reply_markup=start_inline()
    )

        


@router.callback_query(F.data == 'start')
async def start_cal(callback: CallbackQuery, state: FSMContext):
    user = await get_user_db(callback.from_user.id)
    await callback.message.edit_text(
        text=f"–ë–æ—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ CM_Laguerre PPO PercentileRank Mkt Tops & Bottoms\n–í–∞—à –±–∞–ª–∞–Ω—Å: {round(user['balance'])}$  üí∏",
        reply_markup=start_inline()
    )

@router.callback_query(F.data.startswith('cm'))
async def cm_params(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split()[1] if len(callback.data.split()) > 1 else None
    
    if action == 'reset':
        # Reset CM settings to default
        await reset_cm_settings(callback.from_user.id)
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CM —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
        
        # Get default settings
        cm_settings = load_cm_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CM\\n\\n"
        text += "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.\\n\\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
        text += f"üìà Take Profit: {cm_settings.get('TakeProfit', 3.0)}%\\n"
        text += f"üìâ Stop Loss: {cm_settings.get('StopLoss', -1.5)}%\\n"
        text += f"SHORT_GAMMA: {cm_settings['SHORT_GAMMA']}\\n"
        text += f"LONG_GAMMA: {cm_settings['LONG_GAMMA']}\\n"
        text += f"LOOKBACK_T: {cm_settings['LOOKBACK_T']}\\n"
        text += f"LOOKBACK_B: {cm_settings['LOOKBACK_B']}\\n"
        text += f"PCTILE: {cm_settings['PCTILE']}"
        
        await callback.message.edit_text(text, reply_markup=cm_params_inline())
        return

    if action:
        # Save the parameter name to state
        await state.set_state(CMParamStates.edit_param)
        await state.update_data(param_name=action)
        
        text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {action}:"
        if action in ['TakeProfit', 'StopLoss']:
            text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {'Take Profit' if action == 'TakeProfit' else 'Stop Loss'} –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
            ]])
        )
        return

    # Display current CM settings
    cm_settings = load_cm_settings(callback.from_user.id)
    
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CM\\n\\n"
    text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
    text += f"üìà Take Profit: {cm_settings.get('TakeProfit', 3.0)}%\\n"
    text += f"üìâ Stop Loss: {cm_settings.get('StopLoss', -1.5)}%\\n"
    text += f"SHORT_GAMMA: {cm_settings['SHORT_GAMMA']}\\n"
    text += f"LONG_GAMMA: {cm_settings['LONG_GAMMA']}\\n"
    text += f"LOOKBACK_T: {cm_settings['LOOKBACK_T']}\\n"
    text += f"LOOKBACK_B: {cm_settings['LOOKBACK_B']}\\n"
    text += f"PCTILE: {cm_settings['PCTILE']}"
    
    await callback.message.edit_text(text, reply_markup=cm_params_inline())

@router.message(CMParamStates.edit_param)
async def process_cm_param_edit(message: Message, state: FSMContext, bot: Bot):
    # Get the parameter name from state
    data = await state.get_data()
    param_name = data.get('param_name')
    
    if not param_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # Get the input value
    param_value = message.text.strip()
    
    try:
        # Convert value to float for numeric parameters
        if param_name in ['TakeProfit', 'StopLoss', 'SHORT_GAMMA', 'LONG_GAMMA', 'PCTILE']:
            param_value = float(param_value)
        else:
            param_value = int(param_value)
        
        # Validate TakeProfit and StopLoss
        if param_name == 'TakeProfit' and param_value <= 0:
            await message.answer("Take Profit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        if param_name == 'StopLoss' and param_value >= 0:
            await message.answer("Stop Loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 0")
            return
        
        # Update the parameter
        await update_cm_setting(message.from_user.id, param_name, param_value)
        
        # Get updated settings
        cm_settings = load_cm_settings(message.from_user.id)
        
        # Format message with updated settings
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CM\\n\\n"
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
        text += f"üìà Take Profit: {cm_settings.get('TakeProfit', 3.0)}%\\n"
        text += f"üìâ Stop Loss: {cm_settings.get('StopLoss', -1.5)}%\\n"
        text += f"SHORT_GAMMA: {cm_settings['SHORT_GAMMA']}\\n"
        text += f"LONG_GAMMA: {cm_settings['LONG_GAMMA']}\\n"
        text += f"LOOKBACK_T: {cm_settings['LOOKBACK_T']}\\n"
        text += f"LOOKBACK_B: {cm_settings['LOOKBACK_B']}\\n"
        text += f"PCTILE: {cm_settings['PCTILE']}"
        
        await message.answer(text, reply_markup=cm_params_inline())
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
            ]])
        )

@router.callback_query(F.data.startswith('divergence'))
async def divergence_params(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split()[1] if len(callback.data.split()) > 1 else None
    
    if action == 'reset':
        # Reset divergence settings to default
        await reset_divergence_settings(callback.from_user.id)
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
        
        # Get default settings
        divergence_settings = load_divergence_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏\\n\\n"
        text += "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.\\n\\n"
        
        # Display current parameters
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
        text += f"üìà Take Profit: {divergence_settings.get('TakeProfit', 3.0)}%\\n"
        text += f"üìâ Stop Loss: {divergence_settings.get('StopLoss', -1.5)}%\\n"
        text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\\n"
        text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\\n"
        text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\\n"
        text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\\n"
        text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\\n"
        text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\\n"
        text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\\n"
        text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}"
        
        await callback.message.edit_text(text, reply_markup=divergence_params_inline())
        return

    if action:
        # Save the parameter name to state
        await state.set_state(DivergenceParamStates.edit_param)
        await state.update_data(param_name=action)
        
        text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {action}:"
        if action in ['TakeProfit', 'StopLoss']:
            text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {'Take Profit' if action == 'TakeProfit' else 'Stop Loss'} –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
            ]])
        )
        return

    # Display current divergence settings
    divergence_settings = load_divergence_settings(callback.from_user.id)
    
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏\\n\\n"
    text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
    text += f"üìà Take Profit: {divergence_settings.get('TakeProfit', 3.0)}%\\n"
    text += f"üìâ Stop Loss: {divergence_settings.get('StopLoss', -1.5)}%\\n"
    text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\\n"
    text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\\n"
    text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\\n"
    text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\\n"
    text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\\n"
    text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\\n"
    text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\\n"
    text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}"
    
    await callback.message.edit_text(text, reply_markup=divergence_params_inline())

@router.callback_query(F.data.startswith('divergence_sl_type'))
async def divergence_sl_type_select(callback: CallbackQuery, state: FSMContext):
    selected_type = callback.data.split()[1]  # PERC, ATR –∏–ª–∏ NONE
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä STOP_LOSS_TYPE
    success = update_divergence_setting(callback.from_user.id, 'STOP_LOSS_TYPE', selected_type)
    
    if success:
        await callback.answer(f"–¢–∏–ø —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {selected_type}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        divergence_settings = load_divergence_settings(callback.from_user.id)
        
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ (RSI)\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\n"
        text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\n"
        text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\n"
        text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\n"
        text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\n"
        text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\n"
        text += f"STOP_LOSS_TYPE: {divergence_settings['STOP_LOSS_TYPE']}\n"
        text += f"STOP_LOSS_PERC: {divergence_settings['STOP_LOSS_PERC']}\n"
        text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\n"
        text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=divergence_params_inline()
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")

@router.message(DivergenceParamStates.edit_param)
async def process_divergence_param_edit(message: Message, state: FSMContext, bot: Bot):
    # Get the parameter name from state
    data = await state.get_data()
    param_name = data.get('param_name')
    
    if not param_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # Get the input value
    param_value = message.text.strip()
    
    try:
        # Convert value to float for numeric parameters
        if param_name in ['TakeProfit', 'StopLoss', 'ATR_MULTIPLIER', 'TAKE_PROFIT_RSI_LEVEL']:
            param_value = float(param_value)
        else:
            param_value = int(param_value)
        
        # Validate TakeProfit and StopLoss
        if param_name == 'TakeProfit' and param_value <= 0:
            await message.answer("Take Profit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        if param_name == 'StopLoss' and param_value >= 0:
            await message.answer("Stop Loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 0")
            return
        
        # Update the parameter
        await update_divergence_setting(message.from_user.id, param_name, param_value)
        
        # Get updated settings
        divergence_settings = load_divergence_settings(message.from_user.id)
        
        # Format message with updated settings
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏\\n\\n"
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
        text += f"üìà Take Profit: {divergence_settings.get('TakeProfit', 3.0)}%\\n"
        text += f"üìâ Stop Loss: {divergence_settings.get('StopLoss', -1.5)}%\\n"
        text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\\n"
        text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\\n"
        text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\\n"
        text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\\n"
        text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\\n"
        text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\\n"
        text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\\n"
        text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}"
        
        await message.answer(text, reply_markup=divergence_params_inline())
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
            ]])
        )

@router.message(DivergenceParamStates.edit_stop_loss_type)
async def process_divergence_stop_loss_type_edit(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.delete_message(message_id=data.get('last_msg'), chat_id=message.from_user.id)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        try:
            await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
        except Exception:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        stop_loss_type = message.text.strip().upper()
        if stop_loss_type not in ['PERC', 'ATR']:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–æ–ø-–ª–æ—Å—Å–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: PERC, ATR",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
                ]])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await update_divergence_setting(message.from_user.id, 'STOP_LOSS_TYPE', stop_loss_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        divergence_settings = load_divergence_settings(message.from_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏\\n\\n"
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n"
        text += f"üìà Take Profit: {divergence_settings.get('TakeProfit', 3.0)}%\\n"
        text += f"üìâ Stop Loss: {divergence_settings.get('StopLoss', -1.5)}%\\n"
        text += f"RSI_LENGTH: {divergence_settings['RSI_LENGTH']}\\n"
        text += f"LB_RIGHT: {divergence_settings['LB_RIGHT']}\\n"
        text += f"LB_LEFT: {divergence_settings['LB_LEFT']}\\n"
        text += f"RANGE_UPPER: {divergence_settings['RANGE_UPPER']}\\n"
        text += f"RANGE_LOWER: {divergence_settings['RANGE_LOWER']}\\n"
        text += f"TAKE_PROFIT_RSI_LEVEL: {divergence_settings['TAKE_PROFIT_RSI_LEVEL']}\\n"
        text += f"ATR_LENGTH: {divergence_settings['ATR_LENGTH']}\\n"
        text += f"ATR_MULTIPLIER: {divergence_settings['ATR_MULTIPLIER']}"
        
        await message.answer(text, reply_markup=divergence_params_inline())
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_state')
            ]])
        )
        await state.clear()

@router.message(EditDepositPercent.new)
async def process_deposit_percent_edit(message: Message, state: FSMContext, bot: Bot):
    from db.update import up_percent
    
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    try:
        await bot.delete_message(message_id=data.get('last_msg'), chat_id=message.from_user.id)
    except Exception:
        pass
    
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
        percent_value = float(message.text.strip())
        
        if percent_value < 0 or percent_value > 100:
            await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        await up_percent(message.from_user.id, percent_value)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_msg = await message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {percent_value}%")
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=settings_inline()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            await bot.delete_message(message_id=success_msg.message_id, chat_id=message.from_user.id)
        except Exception:
            pass
        
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings start')]
            ])
        )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {e}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='settings start')]
            ])
        )
    
    await state.clear()

