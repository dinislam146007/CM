import asyncio
import queue
import threading
import time

import aiohttp
from aiogram import Bot, types
from pybit.unified_trading import WebSocket

from src.configuration import config, logger
from src.db import Database, PumpDumpSettings
from src.screeners.schemas import TickerInfo
from src.screeners.tasks import ExchangesInfo
from .schemas import Candle, Changes, Signal
from ...utils import generate_chart_bytes


class BybitPumpDumpScreener:

    def __init__(self,
                 bot: Bot,
                 database: Database,
                 exchanges_info: ExchangesInfo,
                 max_history_len: int = config.PD_MAX_HISTORY_LEN,
                 ) -> None:
        """

        :param bot: –û–±—å–µ–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.
        :param database: –û–±—å–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        :param max_history_len: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞—è –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å.
        """
        self._bot = bot
        self._database = database
        self._max_history_len = max_history_len
        self._ignored_symbols = config.BYBIT_IGNORED_SYMBOLS

        self._ws: WebSocket | None = None

        '''–¢—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —é–∑–µ—Ä–æ–≤.'''
        self._active_users_id: list[int] = []
        self._settings: list[PumpDumpSettings] = []

        '''–ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏. –ò–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
        {ticker: [[time, volume], [time, volume], [time, volume] ...]}
        –î–∞–Ω–Ω—ã–µ –ø–æ oi —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç.'''
        self._data: dict[str, list[Candle]] = {}  # –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

        '''–°–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞'''
        self._user_delays: dict[int, dict[str, list]] = {}

        '''–°–ª–æ–≤–∞—Ä—å —Å –æ–±—å–µ–º–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞'''
        self._volume_per_minute: dict[str, float] = {}

        '''–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞, –∏–∑-–∑–∞
        —á–µ–≥–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞: Queue overflow. Message not filled'''
        self._queue = queue.Queue()

        '''–¢–∞–π–º—à—Ç–∞–º–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞. –ë–∞–π–±–∏—Ç –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å
        –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏ –∫–æ–≥–¥–∞ —Å–≤–µ—á–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –Ω–æ–≤—ã–º —Ç–∞–π–º—à—Ç–∞–º–ø–æ–º - 
        –º—ã –¥–æ–±–∞–≤–∏–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏'''
        self._runtime_data: dict[str, Candle] = {}

        self._loop = asyncio.get_event_loop()

        self._exchanges_info = exchanges_info

    def handle_ws_msg(self, msg: dict) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞.
        :param msg:
        :return:
        """

        # e = {'topic': 'kline.1.10000LADYSUSDT', 'data': [
        #     {'start': 1708538580000, 'end': 1708538639999, 'interval': '1', 'open': '0.0006523', 'close': '0.0006523',
        #      'high': '0.0006523', 'low': '0.0006523', 'volume': '0', 'turnover': '0', 'confirm': False,
        #      'timestamp': 1708538584618}], 'ts': 1708538584618, 'type': 'snapshot'}
        def _add_candle(s: str, c: Candle) -> None:
            try:
                self._data[s].append(c)
                self._data[s] = self._data[symbol][-self._max_history_len:]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            except KeyError:
                self._data[s] = [c]

        def _update_candle(s: str, c: Candle) -> None:
            try:
                self._data[s][-1] = c
            except KeyError:
                self._data[s] = [candle]

        try:
            if msg["topic"].startswith("tickers"):
                data = msg["data"]
                self._volume_per_minute[data["symbol"]] = float(data["volume24h"]) / 1440
            else:  # kline
                data = msg["data"][0]
                symbol = msg["topic"].split(".")[-1]

                candle = Candle(
                    timestamp=data["start"],
                    close=float(data["close"]),
                    high=float(data["high"]),
                    low=float(data["low"]),
                    open=float(data["open"]),
                    volume=float(data["volume"]))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—à—É—é —Å–≤–µ—á—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                try:
                    prev_candle: Candle = self._runtime_data[symbol]
                except KeyError:
                    self._runtime_data[symbol] = candle
                    return

                if candle.timestamp > prev_candle.timestamp:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞.
                    self._runtime_data[symbol] = candle  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É
                    _add_candle(symbol, candle)
                else:
                    _update_candle(symbol, candle)
                self._queue.put(symbol)

        except Exception as e:
            logger.exception(e)

    def init_websocket(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±—Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç.
        :return:
        """
        self._ws = WebSocket(channel_type="linear", testnet=False)

    def start_streams(self, symbols: list[str]) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±—Å–æ–∫–µ—Ç —Å—Ç—Ä–∏–º—ã.
        :param symbols:
        :return:
        """
        self._ws.kline_stream(interval=1, symbol=symbols, callback=self.handle_ws_msg)

    async def start_service(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –ø–æ–∏—Å–∫—É –æ–±—å–µ–º–æ–≤."""
        logger.success("Start binance pd screener")

        # –ò–Ω–∏—Ü–∏–∞–ª–¥–∏–∑–∏—Ä—É–µ–º –≤–µ–±—Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç
        self.init_websocket()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã —Å –Ω–∏–º–∏
        symbols: list[str] = await self._get_tickers()
        self.start_streams(symbols)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(self._update_settings_cycle())

        # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
        for i in range(4):
            threading.Thread(target=self._worker).start()

    def _worker(self):
        while True:
            try:
                symbol = self._queue.get(timeout=1)
                self._process_symbol(symbol)
                self._queue.task_done()
            except queue.Empty:
                continue
            except Exception as e:
                logger.exception(e)
                self._queue.task_done()

    def _process_symbol(self, symbol: str) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Ä–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
        :return:
        """
        # –ï–¥–∏–Ω–æ–∂–¥—ã –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        candles: list[Candle] = self._data[symbol]

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        changes: dict[int, Changes] = self._get_changes(candles)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals: list[Signal] = self._generate_signals(symbol, changes)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        asyncio.run_coroutine_threadsafe(self._send_signals(signals, candles), self._loop)

    async def _send_signals(self, signals: list[Signal], candles: list[Candle]) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
        :param signals:
        :return:
        """
        for signal in signals:
            logger.info(f"Detected bybit signal for {signal.user_id}: {signal}")
            try:
                if signal.price_change > 0:
                    signal_title = "üü¢üî• #Pump —Ä–æ—Å—Ç"
                else:
                    signal_title = "üî¥üî• #Dump –ø–∞–¥–µ–Ω–∏–µ"

                bybit_link = f"<a href='https://www.bybit.com/trade/usdt/{signal.symbol}'>Futures</a>"
                tw_link = f"<a href='https://www.tradingview.com/chart/?symbol=BYBIT:{signal.symbol}.P'>TradingView</a>"

                signal_text = (f"#{signal.symbol} (#{signal.timeframe}min) #Bybit #Futures\n"
                               f"{signal_title} {round(signal.price_change, 2)}%\n\n"
                               f"{bybit_link} {tw_link}")

                if not signal.preview:
                    await self._bot.send_message(
                        chat_id=signal.user_id,
                        text=signal_text,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                else:
                    klines = [[c.timestamp, c.open, c.high, c.low, c.close, c.volume] for c in candles]
                    chart = generate_chart_bytes(klines)
                    chart.seek(0)
                    await self._bot.send_photo(
                        chat_id=signal.user_id,
                        caption=signal_text,
                        parse_mode="HTML",
                        photo=types.BufferedInputFile(chart.read(), f"Chart")
                    )

            except Exception as e:
                logger.error(f"Error while send message for {signal.user_id}: {e}")
                if "bot was blocked" in str(e):
                    try:
                        await self._database.user_repo.update(signal.user_id, {"status": False})
                        logger.debug(f"Turn off bot for user {signal.user_id}")
                    except Exception as e:
                        logger.error(f"Cant turn off bot for user {signal.user_id}: {e}")

    def _make_humanreadable_volume(self, volume: float) -> str:
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–∞ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–∏–¥.
        :param volume:
        :return:
        """
        suffixes = {
            1_000: "—Ç—ã—Å.",
            1_000_000: "–º–ª–Ω.",
            1_000_000_000: "–º–ª—Ä–¥.",
            1_000_000_000_000: "—Ç—Ä–ª–Ω.",
            1_000_000_000_000_000: "–∫–≤–¥—Ä–ª–Ω.",
            1_000_000_000_000_000_000: "–∫–≤–Ω—Ç–ª–Ω."
            # –î–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        for divisor in sorted(suffixes.keys(), reverse=True):
            if volume >= divisor:
                return f"{volume / divisor:.2f} {suffixes[divisor]}"
        return str(volume)

    def _generate_signals(self, symbol: str, changes_dict: dict[int, Changes]) -> list[Signal]:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏
        –≤—ã—Å—ã–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∏–≥–Ω–∞–ª.
        :return:
        """
        signals = []

        symbol_info: TickerInfo = self._exchanges_info.get_ticker_info(
            exchange="bybit", market_type="futures", symbol=symbol)

        for user_settings in self._settings:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —é–∑–µ—Ä–∞
            if not user_settings.status:
                continue

            if not user_settings.is_bybit:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = user_settings.user_id
            if user_id not in self._active_users_id:
                continue

            if user_settings.funding_restrict and symbol_info.is_high_fr:
                continue

            if user_settings.futures_ignore_new_symbols and symbol_info.is_new_ticker:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            user_signals_time: list[int] = self._get_user_day_signals_time(user_id, symbol)
            if user_signals_time and \
                    user_signals_time[-1] + config.PD_TIMEOUT_MINUTES * 60 > time.time():
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–†–æ—Å—Ç)
            try:
                growth_changes: Changes = changes_dict[user_settings.pump_interval]
                growth_percent: float = growth_changes.growth
                if growth_percent > user_settings.pump_size and user_settings.long_direction:
                    self._user_delays[user_id][symbol].append(time.time())
                    signals.append(
                        Signal(
                            user_id=user_id,
                            symbol=symbol,
                            price_change=growth_percent,
                            timeframe=user_settings.pump_interval,
                            preview=user_settings.chart_preview
                        )
                    )
            except KeyError:
                pass

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ü–∞–¥–µ–Ω–∏–µ)
            try:
                decay_changes: Changes = changes_dict[user_settings.dump_interval]
                decay_percent: float = decay_changes.decay
                if decay_percent < -user_settings.dump_size and user_settings.short_direction:
                    self._user_delays[user_id][symbol].append(time.time())
                    signals.append(
                        Signal(
                            user_id=user_id,
                            symbol=symbol,
                            price_change=decay_percent,
                            timeframe=user_settings.dump_interval,
                            preview=user_settings.chart_preview
                        )
                    )
            except KeyError:
                pass

        return signals

    def _get_user_day_signals_time(self, user_id: int, symbol: str) -> list[int]:
        """
        –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        —Å—É—Ç–∫–∏.
        :param user_id:
        :param symbol:
        :return:
        """
        current_time = time.time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        threshold_time = current_time - (60 * 60 * 24)  # –í—Ä–µ–º—è, —Å—Ç–∞—Ä—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω—ã

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        if user_id not in self._user_delays:
            self._user_delays[user_id] = {}
            self._user_delays[user_id][symbol] = []

        else:
            # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å —Ç–∏–∫–µ—Ä–∞–º–∏
            if symbol not in self._user_delays[user_id]:
                self._user_delays[user_id][symbol] = []
            # –û—á–∏—â–∞–µ–º –Ω–µ–Ω—É–∂–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            else:
                self._user_delays[user_id][symbol] = [
                    t for t in self._user_delays[user_id][symbol] if t > threshold_time]

        return self._user_delays[user_id][symbol]

    def _get_changes(self, data: list[Candle]) -> dict[int, Changes]:
        """
        –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ self._max_history_len –º–∏–Ω—É—Ç.
        :return:
        """
        changes = {}

        # for minutes in SequentialValues.PUMP_DUMP_TIMEFRAMES:
        for minutes in config.PD_TIMEFRAMES:
            relevant_data = data[-minutes:]
            relevant_data_len = len(relevant_data)

            if relevant_data_len != minutes:
                continue

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è price
            close_price = data[-1].close
            lowest_price = min([candle.low for candle in relevant_data])
            highest_price = max([candle.high for candle in relevant_data])

            growth_change = ((close_price - lowest_price) / lowest_price) * 100 if lowest_price else 0
            decay_change = ((close_price - highest_price) / highest_price) * 100 if highest_price else 0

            changes[minutes] = Changes(
                growth=round(growth_change, 2),
                decay=round(decay_change, 2),
            )

        return changes

    async def _get_tickers(self, category="linear") -> list[str]:
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤.
        :param category:
        :return:
        """
        url = 'https://api.bybit.com/v5/market/tickers'
        params = {'category': category}
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                result = await response.json()
                return [s["symbol"] for s in result["result"]["list"] if s["symbol"] not in self._ignored_symbols and
                        s["symbol"].endswith("USDT")]

    async def _update_settings_cycle(self, timeout: float = 5) -> None:
        """
        –í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param timeout:
        :return:
        """
        while True:
            try:
                self._active_users_id = await self._database.user_repo.get_subscribers_id()
                self._settings = await self._database.pd_repo.get_all()
            except Exception as e:
                logger.exception(e)
            finally:
                await asyncio.sleep(timeout)
