import logging

import ccxt.async_support as ccxt
import pandas as pd
from aiogram.enums import ParseMode
from scipy.stats import percentileofscore
import asyncio
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram import Bot
from strategy_logic.get_all_coins import get_usdt_pairs
from config import config
# from db import *
import datetime
from strategy_logic.rsi import *
from strategy_logic.vsa import *
from strategy_logic.price_action import get_pattern_price_action
from deepseek.deepsekk import analyze_trading_signals
from config import config
from strategy_logic.stop_loss import *
from strategy_logic.moon_bot_strategy import StrategyMoonBot, load_strategy_params,Context
moon = StrategyMoonBot(load_strategy_params())


bot = Bot(token=config.tg_bot_token, default=DefaultBotProperties(parse_mode="HTML"))

"""–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
SHORT_GAMMA = 0.4
LONG_GAMMA = 0.8
LOOKBACK_T = 21
LOOKBACK_B = 15
PCTILE = 90

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
RSI_LENGTH = 7
LB_RIGHT = 3
LB_LEFT = 3
RANGE_UPPER = 60
RANGE_LOWER = 5
TAKE_PROFIT_RSI_LEVEL = 80

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
STOP_LOSS_TYPE = "PERC"  # "ATR", "PERC", "NONE"
STOP_LOSS_PERC = 5.0  # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
ATR_LENGTH = 14  # –ü–µ—Ä–∏–æ–¥ ATR
ATR_MULTIPLIER = 3.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR

exchange = ccxt.bybit()  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ CCXT


# timeframes = ['1d', '4h', '1h', '30m']
timeframes = ['1d',]


symbols = get_usdt_pairs()

async def fetch_ohlcv(symbol, timeframe='1h', limit=500, retries=3, delay=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º-–∞—É—Ç–∞."""
    for attempt in range(retries):
        try:
            ohlcv = await exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['hl2'] = (df['high'] + df['low']) / 2  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–≤–µ—á–∏
            return df
        except ccxt.RequestTimeout:
            print(f"Timeout fetching {symbol} {timeframe}, retrying {attempt + 1}/{retries}...")
            await asyncio.sleep(delay)  # Wait before retrying
    print(f"Failed to fetch {symbol} {timeframe} after {retries} attempts.")
    return None


def laguerre_filter(series, gamma):
    """Laguerre-—Ñ–∏–ª—å—Ç—Ä."""
    L0, L1, L2, L3, f = np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series)

    for i in range(1, len(series)):
        L0[i] = (1 - gamma) * series[i] + gamma * L0[i - 1]
        L1[i] = -gamma * L0[i] + L0[i - 1] + gamma * L1[i - 1]
        L2[i] = -gamma * L1[i] + L1[i - 1] + gamma * L2[i - 1]
        L3[i] = -gamma * L2[i] + L2[i - 1] + gamma * L3[i - 1]
        f[i] = (L0[i] + 2 * L1[i] + 2 * L2[i] + L3[i]) / 6

    return f


def calculate_ppo(df):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Laguerre PPO –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞."""
    df['lmas'] = laguerre_filter(df['hl2'].values, SHORT_GAMMA)
    df['lmal'] = laguerre_filter(df['hl2'].values, LONG_GAMMA)

    df['ppoT'] = (df['lmas'] - df['lmal']) / df['lmal'] * 100
    df['ppoB'] = (df['lmal'] - df['lmas']) / df['lmal'] * 100

    df['pctRankT'] = df['ppoT'].rolling(LOOKBACK_T).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False)
    df['pctRankB'] = df['ppoB'].rolling(LOOKBACK_B).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False) * -1

    return df


def find_last_extreme(df):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ —à–∞–≥–∞—è –Ω–∞–∑–∞–¥."""
    for i in range(len(df) - 1, -1, -1):
        if df['pctRankT'].iloc[i] >= PCTILE:
            return "sale", df.iloc[i]
        if df['pctRankB'].iloc[i] <= -PCTILE:
            return "buy", df.iloc[i]
    return "No Signal", None


async def wait_for_next_candle(timeframe):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π."""
    now = datetime.datetime.now()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
    current_time = now.timestamp()

    timeframe_seconds = {
        '1d': 86400,
        '4h': 14400,
        '1h': 3600,
        '30m': 1800,
    }

    interval = timeframe_seconds.get(timeframe)

    if interval:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        next_candle_time = (current_time // interval + 1) * interval
        # –ñ–¥—ë–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        print(timeframe, next_candle_time - current_time)

        await asyncio.sleep(next_candle_time - current_time)


async def process_timeframe(timeframe):
    while True:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""
        # user_ids = await get_all_user_id()
        now = datetime.datetime.now().strftime('%d-%m-%Y %H:%M')
        btc_df_5m = await fetch_ohlcv("BTCUSDT", "5m", limit=300)  # ‚Üê –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        btc_delta_24h = moon._delta(btc_df_5m["close"], 288)       # –ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞


        for symbol in symbols:
            try:
                df_5m = await fetch_ohlcv(symbol, "5m", limit=300)
                if df_5m is None:                 # <-- –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ —É –≤–∞—Å
                    continue

                # ----- Moon¬†Bot‚Äë–∫–æ–Ω—Ç–µ–∫—Å—Ç -----
                hourly_vol = df_5m["volume"].iloc[-12:].sum()
                ticker_24h = await exchange.fetch_ticker(symbol)
                ctx = Context(                          # ‚Üê –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º dataclass
                    ticker_24h=ticker_24h,
                    hourly_volume=hourly_vol,
                    btc_df=btc_df_5m,
                )

                # ----- Moon¬†Bot‚Äë—Ñ–∏–ª—å—Ç—Ä—ã + —Å–∏–≥–Ω–∞–ª -----
                if moon.check_coin(symbol, df_5m, ctx) and moon.should_place_order(df_5m):
                    order = moon.build_order(df_5m)   # ‚Üê —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç TP/SL

                    # ======= —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –ù–ï –ø–æ–∫—É–ø–∞—Ç—å =======
                    text = (
                        f"üöÄ <b>MoonBot LONG —Å–∏–≥–Ω–∞–ª</b>\n"
                        f"<code>{symbol}</code>\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {order['price']:.4f}\n"
                        f"–û–±—ä—ë–º (USDT): {moon.p['OrderSize']}\n"
                        f"TP (+{moon.p['TakeProfit']}¬†%): {order['take_profit']:.4f}\n"
                        f"SL ({moon.p['StopLoss']}¬†%): {order['stop_loss']:.4f}"
                    )
                    await bot.send_message(chat_id=6634277726, text=text)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                # df = await fetch_ohlcv(symbol, timeframe)
                # if df is None or len(df) < 3:
                #     print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {timeframe}")
                #     continue
                    
                # # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                # df = calculate_ppo(df)
                # df = calculate_ema(df)
                # df = calculate_rsi(df)
                # df = generate_signals_rsi(df)
                # df = detect_vsa_signals(df)
                
                # # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
                # finish, last_candle = find_last_extreme(df)
                
                # # –ù–µ –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤ check_signals_near_level
                # # price_action_pattern = await get_pattern_price_action(df[-3:].values.tolist(), "spot")
                
                # # Find support and resistance levels - –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                # levels = find_support_resistance(df, timeframe=timeframe)
                # signals_near_level = await check_signals_near_level(df, levels, timeframe=timeframe)
                
                # # Process signals near levels
                # for signal in signals_near_level:
                #     position_type = 'long' if signal['level_type'] == 'support' else 'short'
                #     entry_price = df['close'].iloc[-1]
                    
                #     # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å —É—Ä–æ–≤–µ–Ω—å –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã
                #     level = {
                #         'level_price': signal['level_price'],
                #         'range_min': signal['range_min'],
                #         'range_max': signal['range_max']
                #     }
                #     stop_loss = calculate_stop_loss(level, position_type, STOP_LOSS_PERC)

                #     text = f"""
                #     üìå <b>{symbol} [{timeframe}]</b>
                #     –£—Ä–æ–≤–µ–Ω—å: {signal['level_type'].upper()} 
                #     –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {signal['level_price']:.4f}
                #     –î–∏–∞–ø–∞–∑–æ–Ω: {signal['range_min']:.4f} - {signal['range_max']:.4f} (—à–∏—Ä–∏–Ω–∞: {signal['range_width']:.4f})
                #     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π: {signal['strength']}
                    
                #     –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {entry_price:.4f} (üìè {signal['distance_percent']:.2f}%)

                #     üîî <b>–°–∏–≥–Ω–∞–ª—ã —Ä—è–¥–æ–º —Å —É—Ä–æ–≤–Ω–µ–º:</b>
                #     RSI: {signal['rsi_signal']}
                #     CM: {signal['cm_signal']}
                #     Price Action: {signal['price_action_signal']}

                #     üö® <b>–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é:</b> {position_type.upper()}
                #     üéØ –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.4f} ({STOP_LOSS_PERC}%)
                #     """

                #     try:
                #         await bot.send_message(chat_id=6634277726, text=text)
                #     except Exception as e:
                #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # # Generate comprehensive trading signals with stop loss parameters
                # trading_signals = generate_trading_signals(
                #     df, 
                #     rsi_length=RSI_LENGTH, 
                #     lbR=LB_RIGHT, 
                #     lbL=LB_LEFT, 
                #     take_profit_level=TAKE_PROFIT_RSI_LEVEL,
                #     stop_loss_type=STOP_LOSS_TYPE,
                #     stop_loss_perc=STOP_LOSS_PERC,
                #     atr_length=ATR_LENGTH,
                #     atr_multiplier=ATR_MULTIPLIER
                # )
                
                # # Legacy divergence detection methods (can be kept for reference)
                # rsi_divergence = detect_rsi_divergence(df)
                # cm_divergence = detect_cm_ppo_divergence(df)
                
                # Print detailed trading information
#                 if trading_signals['entry_signal'] or trading_signals['exit_signal']:
#                     test_coin_list = ['BTCUSDT', 'ETHUSDT', 'DOGEUSDT', 'LTCUSDT', 'XRPUSDT', 'SOLUSDT', 'TRXUSDT']
#                     if symbol in test_coin_list:
#                         text = f"""
# ====== {symbol} [{timeframe}] ======
# Signal Type: {trading_signals['signal_type']}
# Position Type: {trading_signals['position_type']}
# # Entry Signal: {trading_signals['entry_signal']}
# # Exit Signal: {trading_signals['exit_signal']}
# Current Price: {trading_signals['current_price']}
# Current RSI: {trading_signals['current_rsi']:.2f}

# Risk Management:
# Stop Loss Level: {trading_signals['stop_loss_level']}
# Target Price: {trading_signals['target_price']}
# Take Profit Triggered: {trading_signals['take_profit_triggered']}
# Stop Loss Hit: {trading_signals['stop_loss_hit']}

# Divergence Detected:
# Regular Bullish: {trading_signals['divergence']['regular_bullish']}
# Hidden Bullish: {trading_signals['divergence']['hidden_bullish']}
# Regular Bearish: {trading_signals['divergence']['regular_bearish']}
# Hidden Bearish: {trading_signals['divergence']['hidden_bearish']}

# # Legacy Signals:
# # RSI Divergence: {rsi_divergence}
# # CM Divergence: {cm_divergence}
# ==============================
#                 """
#                         await bot.send_message(chat_id=747471391, text=text)
                
                # Rest of your existing code for signal processing...

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol} –Ω–∞ {timeframe}: {e}")
                continue
                
            # –û–∂–∏–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await asyncio.sleep(0.1)
            
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
        await wait_for_next_candle(timeframe)

async def main():
    try:
        await asyncio.gather(*[process_timeframe(tf) for tf in timeframes])
    finally:
        await exchange.close()  # Ensures resources are released

asyncio.run(main())
