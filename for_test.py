import asyncio
import queue
import threading
import time
import aiohttp
from pybit.unified_trading import WebSocket
from config import config
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from strategy_logic.get_all_coins import get_usdt_pairs  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.tg_bot_token, default=DefaultBotProperties(parse_mode="HTML"))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–Ω–µ—Ä–∞
class Candle:
    def __init__(self, timestamp, close, high, low, open, volume):
        self.timestamp = timestamp
        self.close = close
        self.high = high
        self.low = low
        self.open = open
        self.volume = volume

class Changes:
    def __init__(self, growth, decay):
        self.growth = growth
        self.decay = decay

class Signal:
    def __init__(self, symbol, price_change, timeframe):
        self.symbol = symbol
        self.price_change = price_change
        self.timeframe = timeframe

class BybitPumpDumpScreener:
    def __init__(self, max_history_len=60):
        """
        :param max_history_len: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self._max_history_len = max_history_len
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        self._ignored_symbols = ["BTCUSDT3L", "BTCUSDT3S"]
        
        self._ws = None
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–º–ø/–¥–∞–º–ø —Å–∏–≥–Ω–∞–ª–æ–≤
        self.TIMEFRAMES = [5, 10, 15, 30]
        
        # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.CHANNEL_ID = config.public_channel_id
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        self.PUMP_SIZE = 3.0  # % —Ä–æ—Å—Ç–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        self.DUMP_SIZE = 3.0  # % –ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        
        # –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.TIMEOUT_MINUTES = 60
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.LONG_DIRECTION = True
        self.SHORT_DIRECTION = True

        # –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        self._data = {}
        
        # –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        self._delays = {}

        # –°–ª–æ–≤–∞—Ä—å —Å –æ–±—ä–µ–º–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        self._volume_per_minute = {}

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._queue = queue.Queue()

        # –¢–∞–π–º—à—Ç–∞–º–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞
        self._runtime_data = {}

        self._loop = asyncio.get_event_loop()

    def handle_ws_msg(self, msg: dict) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞.
        """
        def _add_candle(s: str, c: Candle) -> None:
            try:
                self._data[s].append(c)
                self._data[s] = self._data[s][-self._max_history_len:]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            except KeyError:
                self._data[s] = [c]

        def _update_candle(s: str, c: Candle) -> None:
            try:
                self._data[s][-1] = c
            except KeyError:
                self._data[s] = [c]

        try:
            if msg["topic"].startswith("tickers"):
                data = msg["data"]
                self._volume_per_minute[data["symbol"]] = float(data["volume24h"]) / 1440
            else:  # kline
                data = msg["data"][0]
                symbol = msg["topic"].split(".")[-1]

                candle = Candle(
                    timestamp=data["start"],
                    close=float(data["close"]),
                    high=float(data["high"]),
                    low=float(data["low"]),
                    open=float(data["open"]),
                    volume=float(data["volume"]))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—à—É—é —Å–≤–µ—á—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                try:
                    prev_candle = self._runtime_data[symbol]
                except KeyError:
                    self._runtime_data[symbol] = candle
                    return

                if candle.timestamp > prev_candle.timestamp:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞.
                    self._runtime_data[symbol] = candle  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É
                    _add_candle(symbol, candle)
                else:
                    _update_candle(symbol, candle)
                self._queue.put(symbol)

        except Exception as e:
            print(f"Error in handle_ws_msg: {e}")

    def init_websocket(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±—Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç.
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º testnet –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self._ws = WebSocket(
            channel_type="linear", 
            testnet=True,  # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            ping_interval=20,
            ping_timeout=10,
            trace_logging=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            restart_on_error=True
        )

    def start_streams(self, symbols: list[str]) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±—Å–æ–∫–µ—Ç —Å—Ç—Ä–∏–º—ã.
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_symbols = symbols[:5] if len(symbols) > 5 else symbols
        print(f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ {len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤: {test_symbols}")
        
        try:
            self._ws.kline_stream(interval=1, symbol=test_symbols, callback=self.handle_ws_msg)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å—Ç—Ä–∏–º—ã: {e}")

    async def start_service(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –ø–æ–∏—Å–∫—É –æ–±—ä–µ–º–æ–≤."""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt+1}/{max_retries}")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–±—Å–æ–∫–µ—Ç
                self.init_websocket()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∏–º—ã —Å –Ω–∏–º–∏
                symbols = await self._get_tickers()
                self.start_streams(symbols)
                
                # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
                for i in range(2):  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    threading.Thread(target=self._worker, daemon=True).start()
                
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                break
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                if attempt < max_retries - 1:
                    wait_time = 30 * (attempt + 1)
                    print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
                    await asyncio.sleep(wait_time)
                else:
                    print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                    raise

    def _worker(self):
        while True:
            try:
                symbol = self._queue.get(timeout=1)
                self._process_symbol(symbol)
                self._queue.task_done()
            except queue.Empty:
                continue
            except Exception as e:
                print(f"Error in worker: {e}")
                self._queue.task_done()

    def _process_symbol(self, symbol: str) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if symbol not in self._data:
                return
                
            candles = self._data[symbol]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            if len(candles) < max(self.TIMEFRAMES):
                return
                
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            changes = self._get_changes(candles)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = self._generate_signals(symbol, changes)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if signals:
                asyncio.run_coroutine_threadsafe(self._send_signals(signals), self._loop)
        except Exception as e:
            print(f"Error processing symbol {symbol}: {e}")

    async def _send_signals(self, signals: list[Signal]) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
        """
        for signal in signals:
            try:
                if signal.price_change > 0:
                    signal_title = "üü¢üî• #Pump —Ä–æ—Å—Ç"
                else:
                    signal_title = "üî¥üî• #Dump –ø–∞–¥–µ–Ω–∏–µ"

                bybit_link = f"<a href='https://www.bybit.com/trade/usdt/{signal.symbol}'>Futures</a>"
                tw_link = f"<a href='https://www.tradingview.com/chart/?symbol=BYBIT:{signal.symbol}.P'>TradingView</a>"

                signal_text = (f"#{signal.symbol} (#{signal.timeframe}min) #Bybit #Futures\n"
                                f"{signal_title} {round(signal.price_change, 2)}%\n\n"
                                f"{bybit_link} {tw_link}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                await bot.send_message(
                    chat_id=self.CHANNEL_ID,
                    text=signal_text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                print(f"Signal sent: {signal.symbol} {signal.price_change}% to channel {self.CHANNEL_ID}")

            except Exception as e:
                print(f"Error sending signal: {e}")

    def _generate_signals(self, symbol: str, changes_dict: dict[int, Changes]) -> list[Signal]:
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
        """
        signals = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        symbol_signals_time = self._get_symbol_signals_time(symbol)
        if symbol_signals_time and symbol_signals_time[-1] + self.TIMEOUT_MINUTES * 60 > time.time():
            return signals
            
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        for minutes in self.TIMEFRAMES:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–†–æ—Å—Ç)
                if self.LONG_DIRECTION:
                    growth_changes = changes_dict[minutes]
                    growth_percent = growth_changes.growth
                    if growth_percent > self.PUMP_SIZE:
                        self._delays[symbol].append(time.time())
                        signals.append(
                            Signal(
                                symbol=symbol,
                                price_change=growth_percent,
                                timeframe=minutes
                            )
                        )
                        
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ü–∞–¥–µ–Ω–∏–µ)
                if self.SHORT_DIRECTION:
                    decay_changes = changes_dict[minutes]
                    decay_percent = decay_changes.decay
                    if decay_percent < -self.DUMP_SIZE:
                        self._delays[symbol].append(time.time())
                        signals.append(
                            Signal(
                                symbol=symbol,
                                price_change=decay_percent,
                                timeframe=minutes
                            )
                        )
            except KeyError:
                continue

        return signals

    def _get_symbol_signals_time(self, symbol: str) -> list[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–µ.
        """
        current_time = time.time()
        threshold_time = current_time - (60 * 60 * 24)  # –í—Ä–µ–º—è, —Å—Ç–∞—Ä—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω—ã

        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        if symbol not in self._delays:
            self._delays[symbol] = []
        else:
            # –û—á–∏—â–∞–µ–º –Ω–µ–Ω—É–∂–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            self._delays[symbol] = [t for t in self._delays[symbol] if t > threshold_time]

        return self._delays[symbol]

    def _get_changes(self, data: list[Candle]) -> dict[int, Changes]:
        """
        –°—á–∏—Ç–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∑–∞ –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º.
        """
        changes = {}

        for minutes in self.TIMEFRAMES:
            if len(data) < minutes:
                continue
                
            relevant_data = data[-minutes:]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            close_price = data[-1].close
            lowest_price = min([candle.low for candle in relevant_data])
            highest_price = max([candle.high for candle in relevant_data])

            growth_change = ((close_price - lowest_price) / lowest_price) * 100 if lowest_price else 0
            decay_change = ((close_price - highest_price) / highest_price) * 100 if highest_price else 0

            changes[minutes] = Changes(
                growth=round(growth_change, 2),
                decay=round(decay_change, 2),
            )

        return changes

    async def _get_tickers(self, category="linear") -> list[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ —Å Bybit.
        """
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_usdt_pairs
        if self._ws and getattr(self._ws, 'testnet', False):
            print("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ get_usdt_pairs –¥–ª—è testnet")
            try:
                pairs = get_usdt_pairs()
                # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–æ 5-10
                test_pairs = pairs[:10] if len(pairs) > 10 else pairs
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(test_pairs)} –ø–∞—Ä: {test_pairs}")
                return test_pairs
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
                return ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "DOGEUSDT"]
            
        # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º API
        url = 'https://api.bybit.com/v5/market/tickers'
        params = {'category': category}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status != 200:
                        print(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return get_usdt_pairs()[:20]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_usdt_pairs —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                        
                    result = await response.json()
                    if 'result' not in result or 'list' not in result['result']:
                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
                        return get_usdt_pairs()[:20]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_usdt_pairs —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                        
                    tickers = [s["symbol"] for s in result["result"]["list"] 
                              if s["symbol"] not in self._ignored_symbols and
                              s["symbol"].endswith("USDT")]
                    return tickers[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return get_usdt_pairs()[:20]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_usdt_pairs —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º

async def main():
    try:
        screener = BybitPumpDumpScreener()
        
        await screener.start_service()
        
        print("–°–∫—Ä–∏–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
        while True:
            await asyncio.sleep(60)
            
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
