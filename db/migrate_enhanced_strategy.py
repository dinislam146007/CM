#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import asyncio
import sys
import os
from pathlib import Path

# Add project path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db.connect import connect

async def migrate_enhanced_strategy_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É orders"""
    conn = await connect()
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –ì—Ä—É–ø–ø—ã –ø–æ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        field_groups = {
            "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS signal_strength REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS signal_confidence REAL", 
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS strategy_combination TEXT"
            ],
            "–†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS market_condition TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS volatility_level TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS volume_profile TEXT"
            ],
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS rsi_value REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS cm_ppo_value REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS ema_fast REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS ema_slow REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS atr_value REAL"
            ],
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS time_to_tp_minutes INTEGER",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS time_to_sl_minutes INTEGER",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS max_profit_percent REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS max_drawdown_percent REAL"
            ],
            "–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS close_reason TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS close_trigger TEXT"
            ],
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS risk_reward_ratio REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS position_size_percent REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS slippage_percent REAL"
            ],
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS btc_price_entry REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS btc_correlation REAL",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS session_type TEXT"
            ],
            "Pump/Dump –¥–µ—Ç–µ–∫—Ü–∏—è": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS pump_dump_detected BOOLEAN",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS pump_dump_type TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS unusual_volume BOOLEAN"
            ],
            "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS exit_strategy_used TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS trailing_stop_used BOOLEAN",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS partial_close_count INTEGER"
            ],
            "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ": [
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS trade_session_id TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS strategy_version TEXT",
                "ALTER TABLE orders ADD COLUMN IF NOT EXISTS notes TEXT"
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –≥—Ä—É–ø–ø–∞–º
        total_added = 0
        for group_name, fields in field_groups.items():
            print(f"\nüìä –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É: {group_name}")
            for field_sql in fields:
                try:
                    await conn.execute(field_sql)
                    field_name = field_sql.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]
                    print(f"  ‚úÖ {field_name}")
                    total_added += 1
                except Exception as e:
                    field_name = field_sql.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]
                    print(f"  ‚ùå {field_name}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        print(f"\nüîç –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_orders_strategy_combination ON orders(strategy_combination)",
            "CREATE INDEX IF NOT EXISTS idx_orders_market_condition ON orders(market_condition)",
            "CREATE INDEX IF NOT EXISTS idx_orders_close_reason ON orders(close_reason)",
            "CREATE INDEX IF NOT EXISTS idx_orders_signal_strength ON orders(signal_strength)",
            "CREATE INDEX IF NOT EXISTS idx_orders_pnl_percent ON orders(pnl_percent)",
            "CREATE INDEX IF NOT EXISTS idx_orders_buy_time ON orders(buy_time)",
            "CREATE INDEX IF NOT EXISTS idx_orders_user_strategy ON orders(user_id, strategy_combination)"
        ]
        
        indexes_created = 0
        for index_sql in indexes:
            try:
                await conn.execute(index_sql)
                index_name = index_sql.split('IF NOT EXISTS')[1].split()[0]
                print(f"  ‚úÖ {index_name}")
                indexes_created += 1
            except Exception as e:
                index_name = index_sql.split('IF NOT EXISTS')[1].split()[0]
                print(f"  ‚ùå {index_name}: {e}")
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {total_added}")
        print(f"üîç –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {indexes_created}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            test_fields = ['signal_strength', 'strategy_combination', 'market_condition', 'close_reason']
            for field in test_fields:
                await conn.fetchval(f"SELECT {field} FROM orders LIMIT 1")
                print(f"  ‚úÖ {field} - –¥–æ—Å—Ç—É–ø–Ω–æ")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        await conn.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=== –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ===\n")
    
    success = await migrate_enhanced_strategy_fields()
    
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        print("  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞")
        print("  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫")
        print("  ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å")
        print("  ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC")
        print("  ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è pump/dump")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ create_order() –∏ close_order()")
        print("  2. –î–æ–±–∞–≤—å—Ç–µ —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É")
        print("  3. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    asyncio.run(main()) 