import logging

import ccxt.async_support as ccxt
import pandas as pd
from aiogram.enums import ParseMode
from scipy.stats import percentileofscore
import asyncio
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram import Bot
from strategy_logic.get_all_coins import get_usdt_pairs
from config import config
# from db import *
import datetime
from strategy_logic.rsi import *
from strategy_logic.vsa import *
from strategy_logic.price_action import get_pattern_price_action
from deepseek.deepsekk import analyze_trading_signals
from config import config
from strategy_logic.stop_loss import *
from strategy_logic.moon_bot_strategy import StrategyMoonBot, load_strategy_params, Context
# Initialize moon bot with default params initially - will be replaced with user-specific in the processing loop
moon = StrategyMoonBot(load_strategy_params())
from db.orders import *
import datetime as dt
from db.orders import get_open_orders, get_order_by_id, close_order, save_order, get_active_positions
from db.orders import get_active_btc_position_size, get_daily_profit
import pytz


bot = Bot(token=config.tg_bot_token, default=DefaultBotProperties(parse_mode="HTML"))

"""–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
SHORT_GAMMA = 0.4
LONG_GAMMA = 0.8
LOOKBACK_T = 21
LOOKBACK_B = 15
PCTILE = 90

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
RSI_LENGTH = 7
LB_RIGHT = 3
LB_LEFT = 3
RANGE_UPPER = 60
RANGE_LOWER = 5
TAKE_PROFIT_RSI_LEVEL = 80

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
STOP_LOSS_TYPE = "PERC"  # "ATR", "PERC", "NONE"
STOP_LOSS_PERC = 5.0  # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
ATR_LENGTH = 14  # –ü–µ—Ä–∏–æ–¥ ATR
ATR_MULTIPLIER = 3.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR

exchange = ccxt.bybit()  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ CCXT


# timeframes = ['1d', '4h', '1h', '30m']


symbols = get_usdt_pairs()

async def fetch_ohlcv(symbol, timeframe='1h', limit=500, retries=3, delay=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º-–∞—É—Ç–∞."""
    for attempt in range(retries):
        try:
            ohlcv = await exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['hl2'] = (df['high'] + df['low']) / 2  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–≤–µ—á–∏
            return df
        except ccxt.RequestTimeout:
            print(f"Timeout fetching {symbol} {timeframe}, retrying {attempt + 1}/{retries}...")
            await asyncio.sleep(delay)  # Wait before retrying
    print(f"Failed to fetch {symbol} {timeframe} after {retries} attempts.")
    return None


def laguerre_filter(series, gamma):
    """Laguerre-—Ñ–∏–ª—å—Ç—Ä."""
    L0, L1, L2, L3, f = np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series)

    for i in range(1, len(series)):
        L0[i] = (1 - gamma) * series[i] + gamma * L0[i - 1]
        L1[i] = -gamma * L0[i] + L0[i - 1] + gamma * L1[i - 1]
        L2[i] = -gamma * L1[i] + L1[i - 1] + gamma * L2[i - 1]
        L3[i] = -gamma * L2[i] + L2[i - 1] + gamma * L3[i - 1]
        f[i] = (L0[i] + 2 * L1[i] + 2 * L2[i] + L3[i]) / 6

    return f


def calculate_ppo(df):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Laguerre PPO –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞."""
    df['lmas'] = laguerre_filter(df['hl2'].values, SHORT_GAMMA)
    df['lmal'] = laguerre_filter(df['hl2'].values, LONG_GAMMA)

    df['ppoT'] = (df['lmas'] - df['lmal']) / df['lmal'] * 100
    df['ppoB'] = (df['lmal'] - df['lmas']) / df['lmal'] * 100

    df['pctRankT'] = df['ppoT'].rolling(LOOKBACK_T).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False)
    df['pctRankB'] = df['ppoB'].rolling(LOOKBACK_B).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False) * -1

    return df


def find_last_extreme(df):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ —à–∞–≥–∞—è –Ω–∞–∑–∞–¥."""
    for i in range(len(df) - 1, -1, -1):
        if df['pctRankT'].iloc[i] >= PCTILE:
            return "sale", df.iloc[i]
        if df['pctRankB'].iloc[i] <= -PCTILE:
            return "buy", df.iloc[i]
    return "No Signal", None


async def wait_for_next_candle(timeframe):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π."""
    now = datetime.datetime.now()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
    current_time = now.timestamp()

    timeframe_seconds = {
        '1d': 86400,
        '4h': 14400,
        '1h': 3600,
        '30m': 1800,
        '15m': 900,
        '5m': 300,
        '3m': 180,
        '1m': 60,
    }

    interval = timeframe_seconds.get(timeframe)

    if interval:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        next_candle_time = (current_time // interval + 1) * interval
        # –ñ–¥—ë–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
        wait_time = next_candle_time - current_time
        print(f"Waiting for next {timeframe} candle: {wait_time:.2f} seconds")

        await asyncio.sleep(wait_time)
    else:
        print(f"Unknown timeframe: {timeframe}, waiting 60 seconds as fallback")
        await asyncio.sleep(60)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω


TIMEFRAMES = ["1m", "3m", "5m", "15m", "30m", "1h"]
symbols    = ["BTCUSDT", "ETHUSDT", "DOGEUSDT", "LTCUSDT", "XRPUSDT", "SOLUSDT", "TRXUSDT"]
users      = [6634277726, 747471391]

async def process_tf(tf: str):
    while True:
        btc_df = await fetch_ohlcv("BTCUSDT", "5m", 300)
        for symbol in symbols:
            df5 = await fetch_ohlcv(symbol, "5m", 300)
            dft = await fetch_ohlcv(symbol, tf,   200)
            if df5 is None or dft is None: continue

            ticker  = await exchange.fetch_ticker(symbol)
            ctx = Context(
                ticker_24h=ticker,
                hourly_volume=df5["volume"].iloc[-12:].sum(),
                btc_df=btc_df,
            )

            for uid in users:
                open_order = await get_open_order(uid, symbol, tf)

                # Get user-specific strategy parameters
                user_moon = StrategyMoonBot(load_strategy_params(uid))
                
                # ---------- –≤—Ö–æ–¥ ----------
                if open_order is None:
                    if user_moon.check_coin(symbol, df5, ctx) and user_moon.should_place_order(dft):
                        order_dict = user_moon.build_order(dft)
                        entry = order_dict["price"]
                        tp  = order_dict["take_profit"]
                        sl  = order_dict["stop_loss"]
                        
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –Ω–∞ 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                        user_balance = await get_user_balance(uid)
                        investment_amount = user_balance * 0.05  # 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                        qty = investment_amount / entry  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                        qty = round(qty, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        
                        # –ï—Å–ª–∏ –æ–±—ä–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª, —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                        if qty * entry < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ 10 USDT
                            qty = 10 / entry
                            qty = round(qty, 6)
                        
                        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
                        try:
                            await create_order(uid, symbol, tf, "long", qty, entry, tp, sl)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
                            new_balance = await get_user_balance(uid)
                            
                            await bot.send_message(
                                uid,
                                f"üü¢ <b>–ü–û–ö–£–ü–ö–ê</b> {symbol} {tf}\n"
                                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:.4f} USDT\n"
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty:.6f} ({(qty * entry):.2f} USDT)\n"
                                f"TP: {tp:.4f} | SL: {sl:.4f}\n\n"
                                f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT (-{(qty * entry):.2f} USDT)"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                # ---------- –≤—ã—Ö–æ–¥ ----------
                else:
                    last_price = dft["close"].iloc[-1]
                    hit_tp = last_price >= open_order["tp_price"]
                    hit_sl = last_price <= open_order["sl_price"]

                    if hit_tp or hit_sl:
                        try:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P&L —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤
                            closed_order = await close_order(open_order["id"], last_price)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–¥–µ—Ä–∞
                            user_id = closed_order["user_id"]
                            entry_price = closed_order["coin_buy_price"]
                            exit_price = closed_order["coin_sale_price"]
                            qty = closed_order["qty"]
                            pnl_percent = closed_order["pnl_percent"]
                            pnl_usdt = closed_order["pnl_usdt"]
                            return_amount = closed_order["return_amount_usdt"]
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
                            new_balance = await get_user_balance(uid)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç P&L
                            pnl_emoji = "üî¥" if pnl_percent < 0 else "üü¢"
                            pnl_text = "–£–±—ã—Ç–æ–∫" if pnl_percent < 0 else "–ü—Ä–∏–±—ã–ª—å"
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (+3 —á–∞—Å–∞)
                            now = dt.datetime.now() + dt.timedelta(hours=3)
                            current_date = now.strftime('%d.%m.%Y')
                            current_time = now.strftime('%H:%M')
                            
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC)
                            buy_time_utc = dt.datetime.fromisoformat(str(open_order["buy_time"]).replace('Z', ''))
                            buy_time_moscow = buy_time_utc + dt.timedelta(hours=3)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                            buy_date = buy_time_moscow.strftime('%d.%m.%Y')
                            buy_time = buy_time_moscow.strftime('%H:%M')
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å
                            today = dt.date.today()
                            daily_profit = await get_daily_profit(uid, today)
                            
                            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (TP –∏–ª–∏ SL)
                            if hit_tp:
                                message = (
                                    f"üî¥ <b>–ü–†–û–î–ê–ñ–ê</b> {symbol} {tf}\n\n"
                                    f"üéØ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç\n"
                                    f"üí∏üîã–ü—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl_usdt:.2f} USDT)\n\n"
                                    f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                                    f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {exit_price:.4f}$\n"
                                    f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {qty:.6f} {symbol.replace('USDT', '')} ({(qty * exit_price):.2f} USDT)\n\n"
                                    f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                                    f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                                    f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {tf}\n"
                                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Long üî∞\n\n"
                                    f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
                                )
                            else:  # hit_sl
                                message = (
                                    f"üî¥ <b>–ü–†–û–î–ê–ñ–ê</b> {symbol} {tf}\n"
                                    f"üìõ–ó–∞–∫—Ä—ã—Ç–æ –ø–æ –°—Ç–æ–ø-–ª–æ—Å—Å—É\n"
                                    f"ü§ïü™´–£–±—ã—Ç–æ–∫ –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl_usdt:.2f} USDT)\n\n"
                                    f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                                    f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {exit_price:.4f}$\n"
                                    f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {qty:.6f} {symbol.replace('USDT', '')} ({(qty * exit_price):.2f} USDT)\n\n"
                                    f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                                    f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                                    f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {tf}\n"
                                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Long üî∞\n\n"
                                    f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
                                )
                            
                            await bot.send_message(uid, message)
                            
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            await asyncio.sleep(0.05)   # –Ω–µ –¥—É—à–∏–º API
        await wait_for_next_candle(tf)

async def main():
    try:
        await asyncio.gather(*[process_tf(tf) for tf in TIMEFRAMES])
    finally:
        await exchange.close()  # Ensures resources are released

asyncio.run(main())

async def close_order_with_notification(user_id, order_id, current_price, close_reason):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
    order = await get_order_by_id(order_id)
    
    if order:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await close_order(order_id, current_price)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        entry_price = order['entry_price']
        pnl_percent = ((current_price - entry_price) / entry_price) * 100
        if order['position_side'] == 'SHORT':
            pnl_percent = -pnl_percent
        pnl = (current_price - entry_price) * order['qty']
        if order['position_side'] == 'SHORT':
            pnl = -pnl
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.datetime.now(moscow_tz)
        current_date = now.strftime('%d.%m.%Y')
        current_time = now.strftime('%H:%M')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ –∏–∑ UTC –≤ –ú–°–ö
        buy_time_utc = datetime.datetime.fromtimestamp(order['open_time'])
        buy_time_moscow = pytz.utc.localize(buy_time_utc).astimezone(moscow_tz)
        buy_date = buy_time_moscow.strftime('%d.%m.%Y')
        buy_time = buy_time_moscow.strftime('%H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å
        daily_profit = await get_daily_profit(user_id, now.date())
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
        new_balance = await get_user_balance(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª
        direction = "Long üî∞" if order['position_side'] == 'LONG' else "Short üîª"
        symbol_base = order['symbol'].replace('USDT', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        if close_reason == "TP":
            message = (
                f"üî¥ <b>–ü–†–û–î–ê–ñ–ê</b> {order['symbol']} {order['timeframe']}\n\n"
                f"üéØ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç\n"
                f"üí∏üîã–ü—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl:.2f} USDT)\n\n"
                f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {current_price:.4f}$\n"
                f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {order['qty']:.6f} {symbol_base} ({(order['qty'] * current_price):.2f} USDT)\n\n"
                f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {order['timeframe']}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
                f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
            )
        else:  # SL
            message = (
                f"üî¥ <b>–ü–†–û–î–ê–ñ–ê</b> {order['symbol']} {order['timeframe']}\n"
                f"üìõ–ó–∞–∫—Ä—ã—Ç–æ –ø–æ –°—Ç–æ–ø-–ª–æ—Å—Å—É\n"
                f"ü§ïü™´–£–±—ã—Ç–æ–∫ –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl:.2f} USDT)\n\n"
                f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {current_price:.4f}$\n"
                f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {order['qty']:.6f} {symbol_base} ({(order['qty'] * current_price):.2f} USDT)\n\n"
                f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {order['timeframe']}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
                f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, message)
        
        return True
    return False
