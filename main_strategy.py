import logging

import ccxt.async_support as ccxt
import pandas as pd
from aiogram.enums import ParseMode
from scipy.stats import percentileofscore
import asyncio
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram import Bot
from strategy_logic.get_all_coins import get_usdt_pairs
from config import config
# from db import *
import datetime as dt
from strategy_logic.rsi import *
from strategy_logic.vsa import *
from strategy_logic.price_action import get_pattern_price_action
from deepseek.deepsekk import analyze_trading_signals
from config import config
from strategy_logic.stop_loss import *
from strategy_logic.moon_bot_strategy import StrategyMoonBot, load_strategy_params, Context
# Initialize moon bot with default params initially - will be replaced with user-specific in the processing loop
moon = StrategyMoonBot(load_strategy_params())
from db.orders import *
from db.orders import get_open_orders, get_order_by_id, close_order, save_order, get_active_positions
from db.orders import get_active_btc_position_size, get_daily_profit, init_db
import pytz
from dateutil.parser import parse
from db.orders import get_user_open_orders, get_user_balance
from strategy_logic.user_strategy_params import load_user_params
from strategy_logic.pump_dump import pump_dump_main
from strategy_logic.cm_settings import load_cm_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CM
from strategy_logic.divergence_settings import load_divergence_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
from strategy_logic.rsi_settings import load_rsi_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ RSI
from strategy_logic.pump_dump_settings import load_pump_dump_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pump/Dump
from strategy_logic.pump_dump_trading import process_pump_dump_signal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ Pump/Dump
from strategy_logic.trading_type_settings import load_trading_type_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
from strategy_logic.trading_settings import load_trading_settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
from pathlib import Path
import json
from typing import Callable, Awaitable, Dict, Tuple, Any
import requests
import time


bot = Bot(token=config.tg_bot_token, default=DefaultBotProperties(parse_mode="HTML"))

async def close_order_with_notification(user_id, order_id, current_price, close_reason):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
    order = await get_order_by_id(order_id)
    
    if order:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –æ—Ä–¥–µ—Ä
            if order.get('status', 'OPEN') == 'CLOSED':
                print(f"–û—Ä–¥–µ—Ä {order_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            current_balance = await get_user_balance(user_id)
            print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –æ—Ä–¥–µ—Ä–∞: {current_balance}")
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await close_order(order_id, current_price)
            
            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–æ—Ä–¥–µ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç), –≤—ã—Ö–æ–¥–∏–º
            if not result:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä {order_id}, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è entry_price –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            entry_price = None
            if 'entry_price' in order:
                entry_price = order['entry_price']
            elif 'price' in order:
                entry_price = order['price']
            elif 'open_price' in order:
                entry_price = order['open_price']
            elif 'coin_buy_price' in order:
                entry_price = order['coin_buy_price']
            
            if entry_price is None:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å —Ü–µ–Ω–æ–π –≤—Ö–æ–¥–∞. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–¥–µ—Ä–∞: {order}")
                await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            position_side = order.get('position_side', order.get('side', 'LONG'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é LONG, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            pnl_percent = ((current_price - entry_price) / entry_price) * 100
            if position_side == 'SHORT':
                pnl_percent = -pnl_percent
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            qty = order.get('qty', order.get('amount', 0))
            
            pnl = (current_price - entry_price) * qty
            if position_side == 'SHORT':
                pnl = -pnl
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ú–°–ö
            moscow_tz = pytz.timezone('Europe/Moscow')
            now = dt.datetime.now(moscow_tz)
            current_date = now.strftime('%d.%m.%Y')
            current_time = now.strftime('%H:%M')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ –∏–∑ UTC –≤ –ú–°–ö
            open_time = None
            if 'open_time' in order:
                open_time = order['open_time']
            elif 'buy_time' in order:
                open_time = int(dt.datetime.timestamp(order['buy_time']))
            else:
                open_time = int(dt.datetime.now().timestamp())
                
            buy_time_utc = dt.datetime.fromtimestamp(open_time)
            buy_time_moscow = pytz.utc.localize(buy_time_utc).astimezone(moscow_tz)
            buy_date = buy_time_moscow.strftime('%d.%m.%Y')
            buy_time = buy_time_moscow.strftime('%H:%M')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å
            daily_profit = await get_daily_profit(user_id, now.date())
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
            new_balance = await get_user_balance(user_id)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            balance_change = new_balance - current_balance
            print(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {new_balance} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {balance_change})")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª
            direction = "Long üî∞" if position_side == 'LONG' else "Short üîª"
            symbol = order.get('symbol', 'UNKNOWN')
            symbol_base = symbol.replace('USDT', '')
            timeframe = order.get('timeframe', order.get('interval', '1h'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            if close_reason == "TP":
                message = (
                    f"üî¥ <b>–ó–ê–ö–†–´–¢–ò–ï –û–†–î–ï–†–ê</b> {symbol} {timeframe}\n\n"
                    f"–ë–∏—Ä–∂–∞: {order.get('exchange', 'Bybit')}\n"
                    f"–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏: {order.get('trading_type', 'spot').upper()}"
                    f"{' | –ü–ª–µ—á–æ: x' + str(order.get('leverage', 1)) if order.get('trading_type') == 'futures' else ''}\n\n"
                    f"üéØ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç\n"
                    f"üí∏üîã–ü—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl:.2f} USDT)\n\n"
                    f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                    f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {current_price:.4f}$\n"
                    f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {qty:.6f} {symbol_base} ({(qty * current_price):.2f} USDT)\n\n"
                    f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                    f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                    f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {timeframe}\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
                    f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
                )
            else:  # SL
                message = (
                    f"üî¥ <b>–ó–ê–ö–†–´–¢–ò–ï –û–†–î–ï–†–ê</b> {symbol} {timeframe}\n\n"
                    f"–ë–∏—Ä–∂–∞: {order.get('exchange', 'Bybit')}\n"
                    f"–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏: {order.get('trading_type', 'spot').upper()}"
                    f"{' | –ü–ª–µ—á–æ: x' + str(order.get('leverage', 1)) if order.get('trading_type') == 'futures' else ''}\n\n"
                    f"üìõ–ó–∞–∫—Ä—ã—Ç–æ –ø–æ –°—Ç–æ–ø-–ª–æ—Å—Å—É\n"
                    f"ü§ïü™´–£–±—ã—Ç–æ–∫ –ø–æ —Å–¥–µ–ª–∫–µ: {pnl_percent:.2f}% ({pnl:.2f} USDT)\n\n"
                    f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}$\n"
                    f"üìà–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {current_price:.4f}$\n"
                    f"üõë–ü—Ä–æ–¥–∞–Ω–æ: {qty:.6f} {symbol_base} ({(qty * current_price):.2f} USDT)\n\n"
                    f"üìÜ–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {buy_date}\n"
                    f"üïê–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {buy_time} –ú—Å–∫\n"
                    f"üìâ–¢–§ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {timeframe}\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
                    f"–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –¥–µ–Ω—å: {'+' if daily_profit > 0 else ''} {daily_profit:.2f} USDT {'üí∏üîã' if daily_profit > 0 else 'ü§ï'}\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_id, message)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    return False

"""–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
SHORT_GAMMA = 0.4
LONG_GAMMA = 0.8
LOOKBACK_T = 21
LOOKBACK_B = 15
PCTILE = 90

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
RSI_LENGTH = 7
LB_RIGHT = 3
LB_LEFT = 3
RANGE_UPPER = 60
RANGE_LOWER = 5
TAKE_PROFIT_RSI_LEVEL = 80

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
STOP_LOSS_TYPE = "PERC"  # "ATR", "PERC", "NONE"
STOP_LOSS_PERC = 5.0  # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
ATR_LENGTH = 14  # –ü–µ—Ä–∏–æ–¥ ATR
ATR_MULTIPLIER = 3.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR

exchange = ccxt.bybit()  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ CCXT
# timeframes = ['1d', '4h', '1h', '30m']


symbols = get_usdt_pairs()

async def fetch_ohlcv(symbol, timeframe='1h', limit=500, retries=3, delay=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º-–∞—É—Ç–∞."""
    for attempt in range(retries):
        try:
            ohlcv = await exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['hl2'] = (df['high'] + df['low']) / 2  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–≤–µ—á–∏
            return df
        except ccxt.RequestTimeout:
            print(f"Timeout fetching {symbol} {timeframe}, retrying {attempt + 1}/{retries}...")
            await asyncio.sleep(delay)  # Wait before retrying
    print(f"Failed to fetch {symbol} {timeframe} after {retries} attempts.")
    return None


def laguerre_filter(series, gamma):
    """Laguerre-—Ñ–∏–ª—å—Ç—Ä."""
    L0, L1, L2, L3, f = np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series), np.zeros_like(series)

    for i in range(1, len(series)):
        L0[i] = (1 - gamma) * series[i] + gamma * L0[i - 1]
        L1[i] = -gamma * L0[i] + L0[i - 1] + gamma * L1[i - 1]
        L2[i] = -gamma * L1[i] + L1[i - 1] + gamma * L2[i - 1]
        L3[i] = -gamma * L2[i] + L2[i - 1] + gamma * L3[i - 1]
        f[i] = (L0[i] + 2 * L1[i] + 2 * L2[i] + L3[i]) / 6

    return f


def calculate_ppo(df, cm_settings):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Laguerre PPO –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    df['lmas'] = laguerre_filter(df['hl2'].values, cm_settings['SHORT_GAMMA'])
    df['lmal'] = laguerre_filter(df['hl2'].values, cm_settings['LONG_GAMMA'])

    df['ppoT'] = (df['lmas'] - df['lmal']) / df['lmal'] * 100
    df['ppoB'] = (df['lmal'] - df['lmas']) / df['lmal'] * 100

    df['pctRankT'] = df['ppoT'].rolling(cm_settings['LOOKBACK_T']).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False)
    df['pctRankB'] = df['ppoB'].rolling(cm_settings['LOOKBACK_B']).apply(lambda x: percentileofscore(x, x.iloc[-1]), raw=False) * -1

    return df


def find_cm_signal(df, cm_settings):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ —à–∞–≥–∞—è –Ω–∞–∑–∞–¥."""
    for i in range(len(df) - 1, -1, -1):
        if df['pctRankT'].iloc[i] >= cm_settings['PCTILE']:
            return "short", df.iloc[i]
        if df['pctRankB'].iloc[i] <= -cm_settings['PCTILE']:
            return "long", df.iloc[i]
    return "No Signal", None


async def wait_for_next_candle(timeframe):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π."""
    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
    tf_to_seconds = {
        '1d': 86400,
        '4h': 14400,
        '1h': 3600,
        '30m': 1800,
        '15m': 900,
        '5m': 300,
        '3m': 180,
        '1m': 60,
    }
    
    start_time = tf_to_seconds.get(timeframe, 60 * 60)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
    now = dt.datetime.now()
    current_time = int(now.timestamp())
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
    current_candle_start = current_time - (current_time % start_time)
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
    next_candle_start = current_candle_start + start_time
    
    # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
    seconds_to_wait = next_candle_start - current_time

    if seconds_to_wait > 0:
        print(f"Waiting for next {timeframe} candle: {seconds_to_wait:.2f} seconds")
        await asyncio.sleep(seconds_to_wait)
    else:
        print(f"Unknown timeframe: {timeframe}, waiting 60 seconds as fallback")
        await asyncio.sleep(60)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω


TIMEFRAMES = ["1m", "3m", "5m", "15m", "30m", "1h"]
symbols    = ["BTCUSDT", "ETHUSDT", "DOGEUSDT", "LTCUSDT", "XRPUSDT", "SOLUSDT", "TRXUSDT"]
users      = [6634277726, 747471391]

async def process_tf(tf: str):
    while True:
        # –ü—Ä–æ—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω bybit –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        active_users = []
        settings_path = Path("user_settings")
        if settings_path.exists():
            for json_file in settings_path.glob("*.json"):
                try:
                    with json_file.open("r", encoding="utf-8") as fh:
                        settings = json.load(fh)
                    user_id = int(json_file.stem)
                    if settings.get("bybit", False):
                        active_users.append(user_id)
                except Exception as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {json_file.name}: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not active_users:
            print("[INFO] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º Bybit –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            continue
        
        btc_df = await fetch_ohlcv("BTCUSDT", "5m", 300)
        for symbol in symbols:
            df5 = await fetch_ohlcv(symbol, "5m", 300)
            dft = await fetch_ohlcv(symbol, tf,   200)
            if df5 is None or dft is None: continue

            ticker  = await exchange.fetch_ticker(symbol)
            ctx = Context(
                ticker_24h=ticker,
                hourly_volume=df5["volume"].iloc[-12:].sum(),
                btc_df=btc_df,
            )

            for uid in active_users:
                open_order = await get_open_order(uid, "bybit", symbol, tf)

                # Get user-specific strategy parameters
                user_moon = StrategyMoonBot(load_strategy_params(uid))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cm_settings = load_cm_settings(uid)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                divergence_settings = load_divergence_settings(uid)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                rsi_settings = load_rsi_settings(uid)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pump/Dump –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pump_dump_settings = load_pump_dump_settings(uid)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                trading_type_settings = load_trading_type_settings(uid)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                trading_settings = load_trading_settings(uid)
                trading_type = trading_settings["trading_type"]
                leverage = trading_settings["leverage"]
                
                # ---------- –≤—Ö–æ–¥ ----------
                if open_order is None:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Price Action —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞
                    pattern = await get_pattern_price_action(dft[['timestamp', 'open', 'high', 'low', 'close']].values.tolist()[-5:], trading_type)
                    dft = calculate_ppo(dft, cm_settings)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    dft = calculate_ema(dft)
                    cm_signal, last_candle = find_cm_signal(dft, cm_settings)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    dft = calculate_rsi(dft, period=rsi_settings['RSI_PERIOD'])
                    dft = calculate_ema(dft, 
                                       fast_period=rsi_settings['EMA_FAST'], 
                                       slow_period=rsi_settings['EMA_SLOW'])
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã RSI —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    rsi = generate_signals_rsi(dft, 
                                              overbought=rsi_settings['RSI_OVERBOUGHT'], 
                                              oversold=rsi_settings['RSI_OVERSOLD'])
                    rsi_signal = rsi['signal_rsi'].iloc[-1]

                    diver_signals = generate_trading_signals(
                        dft, 
                        rsi_length=divergence_settings['RSI_LENGTH'], 
                        lbR=divergence_settings['LB_RIGHT'], 
                        lbL=divergence_settings['LB_LEFT'], 
                        take_profit_level=divergence_settings['TAKE_PROFIT_RSI_LEVEL'],
                        stop_loss_type=divergence_settings['STOP_LOSS_TYPE'],
                        stop_loss_perc=divergence_settings['STOP_LOSS_PERC'],
                        atr_length=divergence_settings['ATR_LENGTH'],
                        atr_multiplier=divergence_settings['ATR_MULTIPLIER']
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å (LONG –∏–ª–∏ SHORT)
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é LONG, –¥–ª—è spot –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ LONG
                    position_side = "LONG"
                    
                    # –î–ª—è futures —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏, –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏–∏
                    if trading_type == "futures":
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ SHORT - –º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
                        if cm_signal == "short" or rsi_signal == "Short":
                            position_side = "SHORT"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
                    if position_side == "LONG":
                        price_action_active = pattern is not None and pattern != "" and pattern.startswith("Bull")
                        cm_active = cm_signal == "long"
                        moonbot_active = user_moon.check_coin(symbol, df5, ctx) and user_moon.should_place_order(dft)
                        rsi_active = rsi_signal == "Long"
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—ã—á—å—é –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
                        regular_bullish = diver_signals['divergence']['regular_bullish']
                        hidden_bullish = diver_signals['divergence']['hidden_bullish']
                        divergence_active = False
                        divergence_type = ""
                        
                        if isinstance(regular_bullish, bool) and regular_bullish:
                            divergence_active = True
                            divergence_type += "Regular Bullish "
                        if isinstance(hidden_bullish, bool) and hidden_bullish:
                            divergence_active = True
                            divergence_type += "Hidden Bullish "
                    else:  # SHORT –ø–æ–∑–∏—Ü–∏—è
                        price_action_active = pattern is not None and pattern != "" and pattern.startswith("Bear")
                        cm_active = cm_signal == "short"
                        moonbot_active = False  # MoonBot —Ç–æ–ª—å–∫–æ –¥–ª—è LONG
                        rsi_active = rsi_signal == "Short"
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–¥–≤–µ–∂—å—é –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
                        regular_bearish = diver_signals['divergence']['regular_bearish']
                        hidden_bearish = diver_signals['divergence']['hidden_bearish']
                        divergence_active = False
                        divergence_type = ""
                        
                        if isinstance(regular_bearish, bool) and regular_bearish:
                            divergence_active = True
                            divergence_type += "Regular Bearish "
                        if isinstance(hidden_bearish, bool) and hidden_bearish:
                            divergence_active = True
                            divergence_type += "Hidden Bearish "
                    
                    # Debug output of signal flags
                    print(f"[DEBUG] {exchange.id.upper()} {symbol} {tf} flags => PA={price_action_active} CM={cm_active} Moon={moonbot_active} RSI={rsi_active} Div={divergence_active}")
                    
                    # Add debug info about signals
                    print(f"[SIGNALS] {exchange.id.upper()}/{symbol}/{tf} => PA={price_action_active} CM={cm_active} RSI={rsi_active} Moon={moonbot_active} Div={divergence_active}")
                    
                    any_signal = price_action_active or cm_active or moonbot_active or rsi_active or divergence_active
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    current_price = dft["close"].iloc[-1]
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    if any_signal:
                        # –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º—É–Ω –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                        if moonbot_active:
                            order_dict = user_moon.build_order(dft)
                            entry = order_dict["price"]
                            tp = order_dict["take_profit"]
                            sl = order_dict["stop_loss"]
                        else:
                            # –ë–∞–∑–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                            entry = current_price
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –∏ SL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
                            if position_side == "LONG":
                                # –ë–∞–∑–æ–≤—ã–π TP: +3% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                                tp = entry * 1.03
                                # –ë–∞–∑–æ–≤—ã–π SL: -2% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                                sl = entry * 0.98
                            else:  # SHORT
                                # –ë–∞–∑–æ–≤—ã–π TP: -3% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                                tp = entry * 0.97
                                # –ë–∞–∑–æ–≤—ã–π SL: +2% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                                sl = entry * 1.02
                        
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_balance = await get_user_balance(uid)
                        
                        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ—á–∞ –∏ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {uid}: —Ç–∏–ø={trading_type}, –ø–ª–µ—á–æ={leverage}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–ª–µ—á–∞ –¥–ª—è futures
                        if trading_type == "futures" and leverage < 1:
                            print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –ø–ª–µ—á–æ {leverage} –¥–ª—è {uid} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 1x")
                            leverage = 1
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –ø–ª–µ—á–∞
                        if trading_type == "futures":
                            # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–∞
                            investment_amount = user_balance * 0.05  # 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–µ—á–∞
                            if leverage <= 0:
                                print(f"–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ {leverage} –¥–ª—è {uid}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1x")
                                leverage = 1
                                
                            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
                            qty = (investment_amount * leverage) / entry
                            print(f"–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ futures: {investment_amount} * {leverage} / {entry} = {qty}")
                        else:
                            # –î–ª—è —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ - –æ–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                            investment_amount = user_balance * 0.05  # 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                            qty = investment_amount / entry
                            print(f"–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ spot: {investment_amount} / {entry} = {qty}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        if qty <= 0:
                            print(f"–û–®–ò–ë–ö–ê: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º {qty}, –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞")
                            await bot.send_message(uid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–∏: {qty}")
                            continue
                            
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                        qty = round(qty, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        
                        # –ï—Å–ª–∏ –æ–±—ä–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª, —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                        if qty * entry < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ 10 USDT
                            qty = 10 / entry
                            qty = round(qty, 6)
                        
                        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞ –∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é leverage (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                            if trading_type == "futures" and "user" in trading_settings:
                                user_leverage = trading_settings.get("user", {}).get("leverage", leverage)
                                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ—á–∞: –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö={user_leverage}, –∏—Å–ø–æ–ª—å–∑—É–µ–º={leverage}")
                            
                            order_id = await create_order(uid, "bybit", symbol, tf, position_side, qty, entry, tp, sl, trading_type, leverage)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
                            new_balance = await get_user_balance(uid)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
                            position_emoji = "üî∞" if position_side == "LONG" else "üîª"
                            transaction_emoji = "üü¢" if position_side == "LONG" else "üî¥"
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É
                            message = (
                                f"{transaction_emoji} <b>–û–¢–ö–†–´–¢–ò–ï –û–†–î–ï–†–ê</b> {symbol} {tf}\n\n"
                                f"–ë–∏—Ä–∂–∞: {exchange.id.capitalize()}\n"
                                f"–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏: {trading_type.upper()}"
                                f"{' | –ü–ª–µ—á–æ: x' + str(leverage) if trading_type == 'futures' else ''}\n\n"
                                f"üí∏–û–±—ä–µ–º: {qty:.6f} {symbol.replace('USDT', '')} ({(qty * entry):.2f} USDT)\n\n"
                                f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry:.2f}$\n"
                                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position_side} {position_emoji}\n\n"
                                f"üéØTP: {tp:.4f}$\n"
                                f"üìõSL: {sl:.4f}$\n\n"
                                f"‚ö†Ô∏è–°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º —Å:\n"
                                f"{price_action_active and '‚úÖ' or '‚ùå'} Price Action {pattern if price_action_active else ''}\n"
                                f"{cm_active and '‚úÖ' or '‚ùå'} CM\n"
                                f"{moonbot_active and '‚úÖ' or '‚ùå'} MoonBot\n"
                                f"{rsi_active and '‚úÖ' or '‚ùå'} RSI\n"
                                f"{divergence_active and '‚úÖ' or '‚ùå'} Divergence {divergence_type if divergence_active else ''}\n\n"
                                f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT (-{(investment_amount):.2f} USDT)"
                            )
                            
                            await bot.send_message(uid, message)
                            
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                            await bot.send_message(uid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                
                # ---------- –≤—ã—Ö–æ–¥ ----------
                else:
                    last_price = dft["close"].iloc[-1]
                    
                    # Skip processing if the order is already closed
                    if open_order.get('status', 'OPEN') != 'OPEN':
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É - –æ—Ä–¥–µ—Ä {open_order['id']} —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    position_direction = "LONG"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é LONG
                    if "position_side" in open_order:
                        position_direction = open_order["position_side"]
                    elif "side" in open_order and open_order["side"].upper() == "SELL":
                        position_direction = "SHORT"
                    elif "position_type" in open_order:
                        position_direction = open_order["position_type"]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–π
                    is_long = position_direction.upper() == "LONG"
                    
                    if is_long:
                        hit_tp = last_price >= open_order["tp_price"]
                        hit_sl = last_price <= open_order["sl_price"]
                    else:  # SHORT
                        hit_tp = last_price <= open_order["tp_price"]  # –î–ª—è SHORT TP –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                        hit_sl = last_price >= open_order["sl_price"]  # –î–ª—è SHORT SL –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞

                    if hit_tp or hit_sl:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –µ—â–µ —Ä–∞–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                            current_order = await get_order_by_id(open_order["id"])
                            if current_order and current_order.get('status') == 'CLOSED':
                                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ - –æ—Ä–¥–µ—Ä {open_order['id']} —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                                continue
                            
                            print(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä {open_order['id']} –ø–æ {'TP' if hit_tp else 'SL'}")
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P&L
                            close_result = await close_order_with_notification(
                                uid, open_order["id"], last_price, "TP" if hit_tp else "SL"
                            )
                            
                            if not close_result:
                                print(f"–û—Ä–¥–µ—Ä {open_order['id']} –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–∫—Ä—ã—Ç)")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                            await bot.send_message(uid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            await asyncio.sleep(0.05)   # –Ω–µ –¥—É—à–∏–º API
        await wait_for_next_candle(tf)


# =============================================================================
#  Exchange-specific signal handlers (stubs ‚Äì replace with real logic)
# =============================================================================

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è MEXC Futures
MEXC_INTERVAL_MAP = {
    "1m": "Min1", "3m": "Min3", "5m": "Min5", "15m": "Min15", "30m": "Min30",
    "1h": "Min60", "4h": "Hour4", "8h": "Hour8", "1d": "Day1", "1w": "Week1", "1M": "Month1"
}

def get_binance_ohlcv(symbol: str, interval: str, futures: bool=False, limit: int=1000):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV —Å Binance (spot –∏–ª–∏ futures)"""
    if futures:
        base_url = "https://fapi.binance.com"  # USD-M Futures
        endpoint = "/fapi/v1/klines"
    else:
        base_url = "https://api.binance.com"
        endpoint = "/api/v3/klines"
    params = {"symbol": symbol, "interval": interval, "limit": limit}
    resp = requests.get(base_url + endpoint, params=params)
    resp.raise_for_status()
    klines = resp.json()  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    ohlcv = []
    for k in klines:
        ts = int(k[0])
        o, h, l, c, v = float(k[1]), float(k[2]), float(k[3]), float(k[4]), float(k[5])
        ohlcv.append([ts, o, h, l, c, v])
    return ohlcv

def get_mexc_ohlcv(symbol: str, interval: str, futures: bool=False, limit: int=1000):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV —Å MEXC (spot –∏–ª–∏ futures)"""
    try:
        if futures:
            base_url = "https://contract.mexc.com"
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª —Å "_" (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT -> BTC_USDT)
            if "_" not in symbol:
                if symbol.endswith("USDT"):
                    symbol_name = symbol[:-4] + "_" + symbol[-4:]
                else:
                    symbol_name = symbol  # –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è
            else:
                symbol_name = symbol
            endpoint = f"/api/v1/contract/kline/{symbol_name}"
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            interval_param = MEXC_INTERVAL_MAP.get(interval, interval)
            params = {"interval": interval_param}
            try:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å start/end –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                resp = requests.get(base_url + endpoint, params=params, timeout=10)
                resp.raise_for_status()
                data = resp.json().get("data", {})
                # data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏: 'time', 'open', 'high', 'low', 'close', 'vol'
                times = data.get("time", [])
                opens = data.get("open", [])
                highs = data.get("high", [])
                lows  = data.get("low", [])
                closes= data.get("close", [])
                vols  = data.get("vol", [])
                ohlcv = []
                for i in range(len(times)):
                    ts_ms = int(times[i]) * 1000  # sec -> ms
                    o = float(opens[i]); h = float(highs[i]); 
                    l = float(lows[i]);  c = float(closes[i]); 
                    v = float(vols[i])
                    ohlcv.append([ts_ms, o, h, l, c, v])
                return ohlcv
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MEXC Futures –¥–∞–Ω–Ω—ã—Ö: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance –∫–∞–∫ fallback")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Binance –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback
                return get_binance_ohlcv(symbol, interval, True, limit)
        else:
            # –ú–Ω–æ–≥–∏–µ 3m, 5m –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ MEXC Spot
            # –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è MEXC Spot
            mexc_spot_intervals = {
                "1m": "1m", "5m": "5m", "15m": "15m", "30m": "30m",
                "1h": "1h", "4h": "4h", "1d": "1d", "1w": "1w", "1M": "1M"
            }
            
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è MEXC, –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance API
            if interval not in mexc_spot_intervals:
                print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª {interval} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è MEXC Spot API, –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance")
                return get_binance_ohlcv(symbol, interval, False, limit)
                
            try:
                # MEXC spot API
                base_url = "https://api.mexc.com"
                endpoint = "/api/v3/klines"
                params = {"symbol": symbol, "interval": mexc_spot_intervals.get(interval, interval), "limit": limit}
                resp = requests.get(base_url + endpoint, params=params, timeout=10)
                resp.raise_for_status()
                klines = resp.json()
                ohlcv = []
                for k in klines:
                    ts = int(k[0])
                    o, h, l, c, v = float(k[1]), float(k[2]), float(k[3]), float(k[4]), float(k[5])
                    ohlcv.append([ts, o, h, l, c, v])
                return ohlcv
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MEXC Spot –¥–∞–Ω–Ω—ã—Ö: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Binance –∫–∞–∫ fallback")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Binance –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback
                return get_binance_ohlcv(symbol, interval, False, limit)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_mexc_ohlcv: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
        return []

# ============================ BYBIT OHLCV ===================================
BYBIT_INTERVAL_MAP = {
    "1m": "1", "3m": "3", "5m": "5", "15m": "15", "30m": "30",
    "1h": "60", "4h": "240", "1d": "D", "1w": "W", "1M": "M"
}

def get_bybit_ohlcv(symbol: str, interval: str, futures: bool = False, limit: int = 1000):
    """–ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ —Å Bybit Spot –∏–ª–∏ Futures REST v5."""
    base_url = "https://api.bybit.com"
    endpoint = "/v5/market/kline"
    params = {
        "category": "linear" if futures else "spot",
        "symbol": symbol,
        "interval": BYBIT_INTERVAL_MAP.get(interval, interval),
        "limit": limit,
    }
    resp = requests.get(base_url + endpoint, params=params, timeout=10)
    resp.raise_for_status()
    data = resp.json()
    klines = data.get("result", {}).get("list", [])  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    ohlcv = []
    for k in klines:
        ts = int(k[0])
        o, h, l, c, v = map(float, k[1:6])
        ohlcv.append([ts, o, h, l, c, v])
    return ohlcv

# ======================== Signal-handler wrappers ============================
async def _fetch_ohlcv_to_thread(fetch_fn, *args, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç blocking-—Ñ—É–Ω–∫—Ü–∏—é –≤ default executor –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: fetch_fn(*args, **kwargs))

async def get_binance_spot_signals(user_id: int, settings: dict):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: –ø–æ–ª—É—á–∞–µ—Ç OHLCV Binance Spot –∏ –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞)."""
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_binance_ohlcv, symbol, tf, False, 500)
                    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
                    await asyncio.sleep(0)  # –¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ event-loop
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} Binance Spot: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Binance Spot: {e}")

async def get_binance_futures_signals(user_id: int, settings: dict):
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_binance_ohlcv, symbol, tf, True, 500)
                    # TODO: –∞–Ω–∞–ª–∏–∑
                    await asyncio.sleep(0)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} Binance Futures: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Binance Futures: {e}")

async def get_bybit_spot_signals(user_id: int, settings: dict):
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_bybit_ohlcv, symbol, tf, False, 500)
                    # TODO: –∞–Ω–∞–ª–∏–∑
                    await asyncio.sleep(0)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} Bybit Spot: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Bybit Spot: {e}")

async def get_bybit_futures_signals(user_id: int, settings: dict):
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_bybit_ohlcv, symbol, tf, True, 500)
                    # TODO: –∞–Ω–∞–ª–∏–∑
                    await asyncio.sleep(0)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} Bybit Futures: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Bybit Futures: {e}")

async def get_mexc_spot_signals(user_id: int, settings: dict):
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_mexc_ohlcv, symbol, tf, False, 500)
                    # TODO: –∞–Ω–∞–ª–∏–∑
                    await asyncio.sleep(0)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} MEXC Spot: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ MEXC Spot: {e}")

async def get_mexc_futures_signals(user_id: int, settings: dict):
    try:
        symbols = settings.get("user", {}).get("monitor_pairs", "BTCUSDT").split(",") or ["BTCUSDT"]
        symbols = [s.strip().upper() for s in symbols if s.strip()] or ["BTCUSDT"]
        for symbol in symbols:
            for tf in TIMEFRAMES:
                try:
                    data = await _fetch_ohlcv_to_thread(get_mexc_ohlcv, symbol, tf, True, 500)
                    # TODO: –∞–Ω–∞–ª–∏–∑
                    await asyncio.sleep(0)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}/{tf} MEXC Futures: {e}")
                    await asyncio.sleep(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ MEXC Futures: {e}")

# Map (exchange, trading_type) to handler function
_FETCHER_MAP = {
    ("binance", "spot"):    get_binance_spot_signals,
    ("binance", "futures"): get_binance_futures_signals,
    ("bybit",   "spot"):    get_bybit_spot_signals,
    ("bybit",   "futures"): get_bybit_futures_signals,
    ("mexc",    "spot"):    get_mexc_spot_signals,
    ("mexc",    "futures"): get_mexc_futures_signals,
}

# -----------------------------------------------------------------------------
# Helper functions to read user settings and start proper handlers
# -----------------------------------------------------------------------------

def _get_trading_type(settings: dict) -> str:
    """Return lower-case trading_type from settings (defaults to 'spot')."""
    # Look in multiple places for trading_type
    trading_type = (
        settings.get("trading", {}).get("trading_type") or 
        settings.get("user", {}).get("trading_type") or
        settings.get("trading_type", "spot")
    ).lower()
    
    print(f"[CONFIG] Got trading_type from settings: {trading_type}")
    return trading_type

# ============================= Exchange factory =============================
# –°–æ–∑–¥–∞—ë–º CCXT-—ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥ –∫–∞–∂–¥—É—é (–±–∏—Ä–∂–∞, —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏)
EXCHANGE_FACTORY: Dict[Tuple[str, str], Callable[[], ccxt.Exchange]] = {
    ("bybit",   "spot"):    lambda: ccxt.bybit({"enableRateLimit": True, "defaultType": "spot"}),
    ("bybit",   "futures"): lambda: ccxt.bybit({"enableRateLimit": True, "defaultType": "future"}),
    ("binance", "spot"):    lambda: ccxt.binance({"enableRateLimit": True}),
    # Binance USD-M futures
    ("binance", "futures"): lambda: ccxt.binanceusdm({"enableRateLimit": True}),
    ("mexc",    "spot"):    lambda: ccxt.mexc({"enableRateLimit": True}),
    # MEXC futures ‚Äì usd-m swap (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ ccxt, –æ–±–Ω–æ–≤–∏—Ç–µ)
    ("mexc",    "futures"): lambda: ccxt.mexc3({"enableRateLimit": True}),
}

# --------------------------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fetch ----------------------------
async def fetch_ohlcv_ccxt(exchange: ccxt.Exchange, symbol: str, timeframe: str = "1h", limit: int = 500,
                           retries: int = 3, delay: int = 5):
    """–ü–æ–ª—É—á–∏—Ç—å OHLCV —á–µ—Ä–µ–∑ CCXT. –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ BadSymbol."""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø–∏—Å–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    symbol_variants = [symbol]
    if symbol.endswith("USDT") and "/" not in symbol:
        core = symbol[:-4]
        symbol_variants.append(f"{core}/USDT")          # BTC/USDT
        symbol_variants.append(f"{core}/USDT:USDT")      # –¥–ª—è USD-M —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance, MEXC
    else:
        # –µ—Å–ª–∏ —É–∂–µ —Å "/", –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞
        symbol_variants.append(symbol.replace("/USDT", "USDT"))

    last_exception = None

    # ---------------------- MEXC –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö–∞–∫ ----------------------
    if exchange.id == 'mexc' and timeframe not in {"1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1M"}:
        print(f"Warning: {timeframe} not supported by MEXC, using Binance as fallback for {symbol}")
        bnc = EXCHANGE_FACTORY[("binance", "spot")]()
        try:
            return await fetch_ohlcv_ccxt(bnc, symbol, timeframe, limit)
        finally:
            await bnc.close()

    # ------------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ ---------------------
    for sym in symbol_variants:
        for attempt in range(retries):
            try:
                ohlcv = await exchange.fetch_ohlcv(sym, timeframe, limit=limit)
                df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
                df["hl2"] = (df["high"] + df["low"]) / 2
                return df
            except (ccxt.BadSymbol, ccxt.BadRequest) as e:
                last_exception = e
                # –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–∏–º–≤–æ–ª–∞
                break
            except (ccxt.RequestTimeout, ccxt.DDoSProtection) as e:
                print(f"Timeout/DDoS {exchange.id} {sym} ‚Äì retry {attempt+1}/{retries}")
                last_exception = e
                await asyncio.sleep(delay)
                continue
            except Exception as e:
                last_exception = e
                break

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å ‚Äì –ª–æ–≥–∏—Ä—É–µ–º
    print(f"[fetch_ohlcv_ccxt] Failed {exchange.id} {symbol} ({symbol_variants}) {timeframe}: {last_exception}")
    return None

# ------------------------------ –û–±—â–∏–π worker -------------------------------
async def process_user_exchange(user_id: int, settings: dict, exch_name: str, trading_type: str, symbols: list[str]):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è / —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–µ."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CCXT-–æ–±—ä–µ–∫—Ç
        print(f"[CONFIG] Creating exchange {exch_name} with type {trading_type} for user {user_id}")
        
        # Fix for Binance - force futures if in user settings
        if exch_name == "binance" and trading_type != "futures":
            # Check user settings explicitly for binance trading type
            user_trading_settings = load_trading_settings(user_id)
            if user_trading_settings.get("trading_type", "").lower() == "futures":
                print(f"[CONFIG] FIXING: User {user_id} has futures in settings but got {trading_type}, changing to futures")
                trading_type = "futures"
        
        exchange: ccxt.Exchange = EXCHANGE_FACTORY[(exch_name, trading_type)]()
        print(f"[START] user={user_id} exch={exch_name} type={trading_type} (settings_type={settings.get('trading', {}).get('trading_type')})")
        while True:
            try:
                btc_df = await fetch_ohlcv_ccxt(exchange, "BTCUSDT", "5m", 300)
                if btc_df is None:
                    await asyncio.sleep(10)
                    continue
                for tf in TIMEFRAMES:
                    for symbol in symbols:
                        df5 = await fetch_ohlcv_ccxt(exchange, symbol, "5m", 300)
                        dft = await fetch_ohlcv_ccxt(exchange, symbol, tf, 200)
                        if df5 is None or dft is None:
                            continue
                        ticker = await exchange.fetch_ticker(symbol)
                        ctx = Context(
                            ticker_24h=ticker,
                            hourly_volume=df5["volume"].iloc[-12:].sum(),
                            btc_df=btc_df,
                        )

                        # *** –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä. —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ ***
                        await internal_trade_logic(
                            exchange_name=exch_name,
                            user_id=user_id,
                            df5=df5,
                            dft=dft,
                            ctx=ctx,
                            tf=tf,
                            symbol=symbol,
                            settings=settings,
                            trading_type=trading_type,
                        )

                    await asyncio.sleep(0.05)  # –Ω–µ –¥—É—à–∏–º API
                await wait_for_next_candle("1m")
            except Exception as loop_exc:
                print(f"[ERROR] user={user_id} exch={exch_name}: {loop_exc}")
                await asyncio.sleep(5)
    finally:
        await exchange.close()

# ----------------------- –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------
async def _dispatch_for_user(user_id: int, settings: dict):
    """Start tasks for all enabled exchanges for user."""
    try:
        trading_type = _get_trading_type(settings)
        print(f"[CONFIG] –ù–∞—á–∞–ª—å–Ω—ã–π trading_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {trading_type}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ–∫—Ü–∏–∏ user –Ω–∞–¥ —Å–µ–∫—Ü–∏–µ–π trading
        if "user" in settings and "trading_type" in settings["user"]:
            trading_type = settings["user"]["trading_type"].lower()
            print(f"[CONFIG] –û–±–Ω–∞—Ä—É–∂–µ–Ω trading_type –≤ —Å–µ–∫—Ü–∏–∏ user: {trading_type}")
        
        # —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äì BTCUSDT
        symbols_cfg = settings.get("user", {}).get("monitor_pairs", "BTCUSDT")
        symbols = [s.strip().upper() for s in symbols_cfg.split(",") if s.strip()] or ["BTCUSDT"]

        print(f"[CONFIG] –ò—Ç–æ–≥–æ–≤—ã–π —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {trading_type}")
        
        tasks = []
        for exch_name in ("binance", "bybit", "mexc"):
            if not settings.get(exch_name, False):
                continue
            # Bybit –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º process_tf (—Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if exch_name == "bybit":
                continue  # Bybit –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º process_tf
                
            print(f"[CONFIG] –ó–∞–ø—É—Å–∫ {exch_name} —Å —Ç–∏–ø–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ {trading_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            tasks.append(
                asyncio.create_task(
                    process_user_exchange(user_id, settings, exch_name, trading_type, symbols)
                )
            )
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def run_all_users_settings():
    """Read all user_settings/*.json files and dispatch tasks."""
    try:
        settings_path = Path("user_settings")
        if not settings_path.exists():
            print("[run_all_users_settings] settings directory not found ‚Äì skipping")
            return

        tasks = []
        for json_file in settings_path.glob("*.json"):
            try:
                with json_file.open("r", encoding="utf-8") as fh:
                    settings = json.load(fh)
                user_id = int(json_file.stem)
                tasks.append(asyncio.create_task(_dispatch_for_user(user_id, settings)))
            except Exception as exc:
                print(f"[run_all_users_settings] Failed to load {json_file.name}: {exc}")
                continue

        if tasks:
            # –ò—Å–ø–æ–ª—å–∑—É—é gather —Å return_exceptions=True —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–±—â–∏–π —Å–±–æ–π
            await asyncio.gather(*tasks, return_exceptions=True)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_all_users_settings: {e}")

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        await init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä Pump/Dump
        asyncio.create_task(pump_dump_main())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–∏—Ä–∂/—Ä–µ–∂–∏–º–æ–≤
        asyncio.create_task(run_all_users_settings())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        await asyncio.gather(*[process_tf(tf) for tf in TIMEFRAMES])
    finally:
        await exchange.close()  # Ensures resources are released

# =============================================================================
#  Actual implementation of internal_trade_logic with proper trading logic.
# =============================================================================
async def internal_trade_logic(*args, **kwargs):
    """Real trading logic for all exchange handlers (Binance, MEXC, etc.)"""
    try:
        # Extract parameters from *args and **kwargs
        if kwargs:
            exchange_name = kwargs.get('exchange_name')
            user_id = kwargs.get('user_id')
            df5 = kwargs.get('df5')
            dft = kwargs.get('dft')
            ctx = kwargs.get('ctx')
            tf = kwargs.get('tf')
            symbol = kwargs.get('symbol')
            settings = kwargs.get('settings')
            trading_type = kwargs.get('trading_type')
        else:
            # Extract from positional args if needed
            exchange_name = args[0] if len(args) > 0 else None
            user_id = args[1] if len(args) > 1 else None
            df5 = args[2] if len(args) > 2 else None
            dft = args[3] if len(args) > 3 else None
            ctx = args[4] if len(args) > 4 else None
            tf = args[5] if len(args) > 5 else None
            symbol = args[6] if len(args) > 6 else None
            settings = args[7] if len(args) > 7 else None
            trading_type = args[8] if len(args) > 8 else None
            
        if not all([user_id, symbol, tf, df5 is not None, dft is not None]):
            print(f"Missing required parameters in internal_trade_logic")
            return
            
        print(f"Processing {exchange_name} {symbol}/{tf} for user {user_id}")
            
        # Check for existing open order
        open_order = await get_open_order(user_id, exchange_name, symbol, tf)
        
        # Get user-specific settings
        user_moon = StrategyMoonBot(load_strategy_params(user_id))
        cm_settings = load_cm_settings(user_id)
        divergence_settings = load_divergence_settings(user_id)
        rsi_settings = load_rsi_settings(user_id)
        trading_settings = load_trading_settings(user_id)
        leverage = trading_settings.get("leverage", 1)
        
        # ENTRY LOGIC (no open order)
        if open_order is None:
            # Get price action patterns
            pattern = await get_pattern_price_action(
                dft[['timestamp', 'open', 'high', 'low', 'close']].values.tolist()[-5:], 
                trading_type
            )
            
            # Calculate indicators
            dft = calculate_ppo(dft, cm_settings)
            dft = calculate_ema(dft)
            cm_signal, last_candle = find_cm_signal(dft, cm_settings)
            
            # Calculate RSI
            dft = calculate_rsi(dft, period=rsi_settings['RSI_PERIOD'])
            dft = calculate_ema(dft, 
                               fast_period=rsi_settings['EMA_FAST'], 
                               slow_period=rsi_settings['EMA_SLOW'])
            
            # Get RSI signals
            rsi = generate_signals_rsi(dft, 
                                      overbought=rsi_settings['RSI_OVERBOUGHT'],
                                      oversold=rsi_settings['RSI_OVERSOLD'])
            rsi_signal = rsi['signal_rsi'].iloc[-1]
            
            # Get divergence signals
            diver_signals = generate_trading_signals(
                dft, 
                rsi_length=divergence_settings['RSI_LENGTH'], 
                lbR=divergence_settings['LB_RIGHT'], 
                lbL=divergence_settings['LB_LEFT'], 
                take_profit_level=divergence_settings['TAKE_PROFIT_RSI_LEVEL'],
                stop_loss_type=divergence_settings['STOP_LOSS_TYPE'],
                stop_loss_perc=divergence_settings['STOP_LOSS_PERC'],
                atr_length=divergence_settings['ATR_LENGTH'],
                atr_multiplier=divergence_settings['ATR_MULTIPLIER']
            )
            
            # Determine position side (LONG/SHORT)
            position_side = "LONG"  # Default to LONG
            
            # For futures, consider short signals
            if trading_type == "futures":
                if cm_signal == "short" or rsi_signal == "Short":
                    position_side = "SHORT"
            
            # Check active signals based on position side
            if position_side == "LONG":
                price_action_active = pattern is not None and pattern != "" and pattern.startswith("Bull")
                cm_active = cm_signal == "long"
                moonbot_active = user_moon.check_coin(symbol, df5, ctx) and user_moon.should_place_order(dft)
                rsi_active = rsi_signal == "Long"
                
                # Check bullish divergence
                regular_bullish = diver_signals['divergence']['regular_bullish']
                hidden_bullish = diver_signals['divergence']['hidden_bullish']
                divergence_active = False
                divergence_type = ""
                
                if isinstance(regular_bullish, bool) and regular_bullish:
                    divergence_active = True
                    divergence_type += "Regular Bullish "
                if isinstance(hidden_bullish, bool) and hidden_bullish:
                    divergence_active = True
                    divergence_type += "Hidden Bullish "
            else:  # SHORT position
                price_action_active = pattern is not None and pattern != "" and pattern.startswith("Bear")
                cm_active = cm_signal == "short"
                moonbot_active = False  # MoonBot only for LONG
                rsi_active = rsi_signal == "Short"
                
                # Check bearish divergence
                regular_bearish = diver_signals['divergence']['regular_bearish']
                hidden_bearish = diver_signals['divergence']['hidden_bearish']
                divergence_active = False
                divergence_type = ""
                
                if isinstance(regular_bearish, bool) and regular_bearish:
                    divergence_active = True
                    divergence_type += "Regular Bearish "
                if isinstance(hidden_bearish, bool) and hidden_bearish:
                    divergence_active = True
                    divergence_type += "Hidden Bearish "
            
            # Debug output of signal flags
            print(f"[DEBUG] {exchange_name.upper()} {symbol} {tf} flags => PA={price_action_active} CM={cm_active} Moon={moonbot_active} RSI={rsi_active} Div={divergence_active}")
            
            # –û–±—â–∏–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É
            any_signal = price_action_active or cm_active or moonbot_active or rsi_active or divergence_active
            
            # Get current price
            current_price = dft["close"].iloc[-1]
            
            # Open position if any signal is active
            if any_signal:
                # Use MoonBot strategy or basic order
                if moonbot_active:
                    order_dict = user_moon.build_order(dft)
                    entry = order_dict["price"]
                    tp = order_dict["take_profit"]
                    sl = order_dict["stop_loss"]
                else:
                    # Basic order based on current price
                    entry = current_price
                    
                    # Calculate TP/SL based on position side
                    if position_side == "LONG":
                        tp = entry * 1.03  # +3%
                        sl = entry * 0.98  # -2%
                    else:  # SHORT
                        tp = entry * 0.97  # -3%
                        sl = entry * 1.02  # +2%
                
                # Get user balance
                user_balance = await get_user_balance(user_id)
                
                # Validate leverage for futures
                if trading_type == "futures" and leverage < 1:
                    leverage = 1
                
                # Calculate position size
                if trading_type == "futures":
                    # For futures, consider leverage
                    investment_amount = user_balance * 0.05  # 5% of balance
                    
                    if leverage <= 0:
                        leverage = 1
                        
                    qty = (investment_amount * leverage) / entry
                else:
                    # For spot trading
                    investment_amount = user_balance * 0.05  # 5% of balance
                    qty = investment_amount / entry
                
                # Validate quantity
                if qty <= 0:
                    print(f"Error: Invalid quantity {qty} for {symbol}")
                    return
                
                # Format quantity
                qty = round(qty, 6)
                
                # Set minimum order size
                if qty * entry < 10:  # Minimum order size 10 USDT
                    qty = 10 / entry
                    qty = round(qty, 6)
                
                try:
                    # Create order with exchange info
                    order_id = await create_order(user_id, exchange_name, symbol, tf, position_side, qty, entry, tp, sl, trading_type, leverage)
                    
                    # Get updated balance after order creation
                    new_balance = await get_user_balance(user_id)
                    
                    # Emojis for position type
                    position_emoji = "üî∞" if position_side == "LONG" else "üîª"
                    transaction_emoji = "üü¢" if position_side == "LONG" else "üî¥"
                    
                    # Notification message
                    message = (
                        f"{transaction_emoji} <b>–û–¢–ö–†–´–¢–ò–ï –û–†–î–ï–†–ê</b> {symbol} {tf}\n\n"
                        f"–ë–∏—Ä–∂–∞: {exchange_name.capitalize()}\n"
                        f"–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏: {trading_type.upper()}"
                        f"{' | –ü–ª–µ—á–æ: x' + str(leverage) if trading_type == 'futures' else ''}\n\n"
                        f"üí∏–û–±—ä–µ–º: {qty:.6f} {symbol.replace('USDT', '')} ({(qty * entry):.2f} USDT)\n\n"
                        f"‚ôªÔ∏è–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {entry:.2f}$\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position_side} {position_emoji}\n\n"
                        f"üéØTP: {tp:.4f}$\n"
                        f"üìõSL: {sl:.4f}$\n\n"
                        f"‚ö†Ô∏è–°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º —Å:\n"
                        f"{price_action_active and '‚úÖ' or '‚ùå'} Price Action {pattern if price_action_active else ''}\n"
                        f"{cm_active and '‚úÖ' or '‚ùå'} CM\n"
                        f"{moonbot_active and '‚úÖ' or '‚ùå'} MoonBot\n"
                        f"{rsi_active and '‚úÖ' or '‚ùå'} RSI\n"
                        f"{divergence_active and '‚úÖ' or '‚ùå'} Divergence {divergence_type if divergence_active else ''}\n\n"
                        f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT (-{(investment_amount):.2f} USDT)"
                    )
                    
                    await bot.send_message(user_id, message)
                    
                except Exception as e:
                    print(f"Error creating order for {exchange_name} {symbol}: {e}")
                    await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ ({exchange_name}): {e}")
        
        # EXIT LOGIC (with open order)
        else:
            last_price = dft["close"].iloc[-1]
            
            # Skip if already closed
            if open_order.get('status', 'OPEN') != 'OPEN':
                return
            
            # Determine position direction
            position_direction = "LONG"  # Default
            if "position_side" in open_order:
                position_direction = open_order["position_side"]
            elif "side" in open_order and open_order["side"].upper() == "SELL":
                position_direction = "SHORT"
            elif "position_type" in open_order:
                position_direction = open_order["position_type"]
            
            # Check if long position
            is_long = position_direction.upper() == "LONG"
            
            # Check TP/SL conditions based on position direction
            if is_long:
                hit_tp = last_price >= open_order["tp_price"]
                hit_sl = last_price <= open_order["sl_price"]
            else:  # SHORT
                hit_tp = last_price <= open_order["tp_price"]
                hit_sl = last_price >= open_order["sl_price"]
            
            # Close if TP/SL hit
            if hit_tp or hit_sl:
                try:
                    # Double-check order status
                    current_order = await get_order_by_id(open_order["id"])
                    if current_order and current_order.get('status') == 'CLOSED':
                        return
                    
                    # Close with notification
                    await close_order_with_notification(
                        user_id, open_order["id"], last_price, "TP" if hit_tp else "SL"
                    )
                    
                except Exception as e:
                    print(f"Error closing order: {e}")
                    await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"Error in internal_trade_logic: {e}")

asyncio.run(main())
