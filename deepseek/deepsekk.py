import aiohttp

from news import get_file_text

from openai import AsyncOpenAI
from config import config

client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=config.deepseek_api
)


#
async def analyze_with_deepseek(messages) -> str:
    combined_text = "\n".join(msg if msg is not None else "" for msg in messages)
    old_news = get_file_text('old_news')
    old_public = get_file_text('old_public')

    inst = f"""
–¢—ã - —Ç—Ä–µ–π–¥–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.

üîπ **–ó–∞–¥–∞—á–∞**:
–°–Ω–∞—á–∞–ª–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏ —Ç–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏.

–ï—Å–ª–∏ **—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Ö–æ–∂–∞ –¥–∞–∂–µ —á—É—Ç—å-—á—É—Ç—å** (–ø–æ —Å–º—ã—Å–ª—É, —Ç–µ–º–µ, —Å–æ–±—ã—Ç–∏—é, –∏–¥–µ–µ, –≤—ã–≤–æ–¥–∞–º) –Ω–∞ —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ `null` –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–ï—Å–ª–∏ **—Ç–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Ö–æ–∂–∞ –¥–∞–∂–µ —á—É—Ç—å-—á—É—Ç—å –ø–æ –≤—ã–≤–æ–¥—É –Ω–∞ —Å—Ç–∞—Ä—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** (–ø–æ —Å–º—ã—Å–ª—É, —Ç–µ–º–µ, —Å–æ–±—ã—Ç–∏—é, –∏–¥–µ–µ, –≤—ã–≤–æ–¥–∞–º), —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ `null` –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–µ, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑:

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ü–µ–Ω–∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞:
1. –ö–∞–∫–∏–µ —Å–¥–µ–ª–∫–∏ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å?
2. –ë—É–¥–µ—Ç –ª–∏ —Ä–æ—Å—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã?

üîπ **–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ `null`**:
–ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤–µ—Ä–Ω–∞, —Ç–∞–∫–∂–µ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ `null` –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- –ù–æ–≤–æ—Å—Ç—å **–Ω–µ –≤–ª–∏—è–µ—Ç** –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
- –¢—ã **–Ω–µ —É–≤–µ—Ä–µ–Ω**, –µ—Å—Ç—å –ª–∏ –≤–ª–∏—è–Ω–∏–µ.

üîπ **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞** (–µ—Å–ª–∏ –Ω–µ `null`):
- –û—Ç–≤–µ—á–∞–π _—Ç–æ–ª—å–∫–æ_ –ø–æ –¥–µ–ª—É.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã ("–û—Ç–≤–µ—Ç:", "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª:", –∏ —Ç.–¥.).
- –ò—Å–ø–æ–ª—å–∑—É–π **Markdown**: *bold text*, _italic text_.
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä—ã –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

üî∏ **–û—Å–æ–±–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π**:
- –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–æ—Å—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º üî∞üî∞üî∞, –µ—Å–ª–∏ —Å –ø–∞–¥–µ–Ω–∏–µ–º, —Ç–æ üîªüîªüîª
- ‚ùì –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
- –í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞–π –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑—á–∏–∫–∞).

–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–¥–µ–ª—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏:
üêïüêïüêï DOGE
üíé Ethereum (ETH)
‚ö†Ô∏è‚ÄºÔ∏èüîªüîªüîª –î–µ–ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –¥–µ–ª–∏—Å—Ç–∏–Ω–≥–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Ä–∞—Ç–∏–ª–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ)

üìå **–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**:

**–°—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏**:
{old_news}

**–¢–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏**:
{combined_text}

**–°—Ç–∞—Ä—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**:
{old_public}

üî∏ **–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** —É–∫–∞–∂–∏ –≤—Å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Å–∞–µ—Ç—Å—è —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å.
"""

    response = await client.chat.completions.create(
        model="openai/chatgpt-4o-latest",
        messages=[{"role": "user", "content": [{"type": "text", "text": inst}]}],
        max_tokens=512,
    )

    return response.choices[0].message.content.strip()

#

async def analyze_trading_signals(df, finish, divergence_convergence_signal, price_action_pattern):
    news_data = get_file_text('news')
    last_values = df.iloc[-1]

    signal_data = f"""
    RSI: {last_values['rsi']}
    EMA(21): {last_values['ema21']}
    EMA(49): {last_values['ema49']}
    PPO: {last_values['ppoT']} / {last_values['ppoB']}
    PPO % Rank: {last_values['pctRankT']} / {last_values['pctRankB']}
    VSA: {last_values['vsa_signal']}
    PA Pattern: {price_action_pattern}
    RSI Signal: {last_values['signal_rsi']}
    CM_Laguerre PPO PR Market Tops/Bottoms: {finish}
    Divergence/Convergence Signal: {divergence_convergence_signal if divergence_convergence_signal else "None"}
    """
    print(signal_data)

    prompt = f"""
    Analyze the data and provide a trading signal:

    Indicators:
    {signal_data}

    News:
    {news_data}

    If bullish signals are present ‚Üí "buy".
    If bearish signals are present ‚Üí "sale".

    Respond strictly with "buy" or "sale".
    """

    async with aiohttp.ClientSession() as session:
        async with session.post(
            'http://localhost:11434/api/generate',
            json={
                'model': 'mistral',
                'prompt': prompt,
                'stream': False
            }
        ) as resp:
            response = await resp.json()
            signal = response['response'].strip().lower()

    return signal