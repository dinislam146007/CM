from news import get_file_text
import json
from openai import AsyncOpenAI
from config import config

client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=config.deepseek_api
)

#
async def analyze_with_deepseek(messages) -> str:
    combined_text = "\n".join(msg if msg is not None else "" for msg in messages)
    old_news = get_file_text('old_news')
    old_public = get_file_text('old_public')

    inst = f"""
–¢—ã - —Ç—Ä–µ–π–¥–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.

üîπ –ó–∞–¥–∞—á–∞:
–°–Ω–∞—á–∞–ª–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ä—ã–µ.

–ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥–æ—Å–ª–æ–≤–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º –¥–µ—Ç–∞–ª—è–º, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π), —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ null –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —Ç—ã —ç—Ç–æ –≤–µ—Ä–Ω—É–ª.

–û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç, —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥. –¢–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.
–£–¥–µ–ª–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å Dogecoin, –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º DOGE –≤ —Ç–µ–∫—Å—Ç–µ.

–¢–∞–∫–∂–µ —É–¥–µ–ª–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –§–†–°, –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º —Å—Ç–∞–≤–æ–∫, –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –î–ö–ü (–î–µ–Ω–µ–∂–Ω–æ-–ö—Ä–µ–¥–∏—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏).  
–ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫, —Å–º—è–≥—á–µ–Ω–∏–µ –î–ö–ü –æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä—è–º–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏.

–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏:
- üêïüêïüêï Dogecoin (DOGE)
- üí∏‚ö†Ô∏è‚ÄºÔ∏è –Ω–æ–≤–æ—Å—Ç—è–º –ø—Ä–æ –§–†–°, —Å—Ç–∞–≤–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –î–ö–ü (–î–µ–Ω–µ–∂–Ω–æ-–ö—Ä–µ–¥–∏—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏).

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ü–µ–Ω–∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞:
1. –ö–∞–∫–∏–µ —Å–¥–µ–ª–∫–∏ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å?
2. –ë—É–¥–µ—Ç –ª–∏ —Ä–æ—Å—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã?

üîπ –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –µ—â—ë –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ), —É–∫–∞–∂–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å –≤–æ–ø—Ä–æ—Å–æ–º:
- ‚ùìüî∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
- ‚ùìüîª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è

üîπ **–í–æ–∑–≤—Ä–∞—Ç null —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏**:
- –ù–æ–≤–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ —Å—Ç–∞—Ä–æ–π.
- –ù–æ–≤–æ—Å—Ç—å –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

üîπ **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞** (–µ—Å–ª–∏ –Ω–µ null):
- –ë–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ ("–û—Ç–≤–µ—Ç:", "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª:" –∏ —Ç.–¥.).
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: *bold text*, _italic text_.
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä—ã.
- –£–∫–∞–∂–∏ —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–∏.

üî∏ **–ò–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π:**
- üî∞üî∞üî∞ —Ä–æ—Å—Ç
- üîªüîªüîª –ø–∞–¥–µ–Ω–∏–µ
- ‚ùì –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
- üí∏‚ö†Ô∏è‚ÄºÔ∏è –§–†–°
- ‚ö†Ô∏è‚ÄºÔ∏èüîªüîªüîª –î–µ–ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)

üî∏ **–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:**
- üêïüêïüêï DOGE
- üíé Ethereum (ETH)

–ü—Ä–∏–º–µ—Ä:
"
üî∞üî∞üî∞

üî•*–¢–µ–º–∞:*

üìå –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã:
"

üìå **–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**:

**–°—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏**:
{old_news}

üî∏ **–í –∫–æ–Ω—Ü–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –Ω–æ–≤–æ—Å—Ç—å—é.
"""

    response = await client.chat.completions.create(
        model="openai/chatgpt-4o-latest",
        messages=[
            {"role": "system", "content": inst},
            {"role": "user", "content": combined_text}
        ],
        max_tokens=2048,
    )

    return response.choices[0].message.content.strip()

#


async def analyze_trading_signals(df,
                                  finish,
                                  divergence_convergence_signal,
                                  price_action_pattern,
                                  symbol,
                                  timeframe,
                                  buy_price
                            ):
    news_data = get_file_text('old_news')
    last_values = df.iloc[-1]

    signal_data = f"""
    Buy_price: {buy_price}
    RSI: {last_values['rsi']}
    EMA(21): {last_values['ema21']}
    EMA(49): {last_values['ema49']}
    PPO: {last_values['ppoT']} / {last_values['ppoB']}
    PPO % Rank: {last_values['pctRankT']} / {last_values['pctRankB']}
    VSA: {last_values['vsa_signal']}
    PA Pattern: {price_action_pattern}
    RSI Signal: {last_values['signal_rsi']}
    CM_Laguerre PPO PR Market Tops/Bottoms: {finish}
    Divergence/Convergence Signal: {divergence_convergence_signal if divergence_convergence_signal else "None"}
    """

    prompt = f"""
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–æ–≤–æ—Å—Ç–∏, —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

    {{
        "pair": "{symbol}",
        "signal_type": "Long üî∞ –∏–ª–∏ Short üîª",
        "timeframe": "{timeframe}",
        "entry_point": "—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ $",
        "take_profit": "—Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ $",
        "stop_loss": "—Ü–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ $",
        "reason": "
        –û—Ç–≤–µ—Ç—å –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞:
        1. –ü–æ –∫–∞–∫–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 
        2. –ü–æ –∫–∞–∫–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–æ–ø –ª–æ—Å 
        ",
        "timestamp": "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd-mm-YYYY HH:MM"
    }}
    –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç –∏ —Å—Ç–æ–ø –ª–æ—Å —Ç—ã –¥–æ–ª–∂–µ–Ω —Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª—ã –±—ã—á—å–∏–º–∏ (Long) –∏–ª–∏ –º–µ–¥–≤–µ–∂—å–∏–º–∏ (Short), —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, –∞ —Ç–∞–∫–∂–µ –≤ –∫–ª—é—á–µ "reason" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π.

    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ JSON.
    Response only Russia and Use Markdown for text formatting *bold text*, _italic text_
    """

    response = await client.chat.completions.create(
        model="openai/gpt-4o-mini",
        response_format={"type": "json_object"},
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": "news:"+ news_data + "indicators"+signal_data}
        ],
        max_tokens=512,
    )

    raw_response = response.choices[0].message.content.strip()
    try:
        signal_json = json.loads(raw_response)
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –º–æ–¥–µ–ª–∏:", raw_response)
        return None

    return signal_json
