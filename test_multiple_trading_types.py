#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from user_settings import (
    load_trading_types,
    update_trading_types,
    add_trading_type,
    remove_trading_type,
    toggle_trading_type,
    load_user_settings,
    save_user_settings
)

async def test_multiple_trading_types():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print("\n1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    types = load_trading_types(test_user_id)
    print(f"   –¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {types}")
    assert types == ["spot"], f"–û–∂–∏–¥–∞–ª—Å—è ['spot'], –ø–æ–ª—É—á–µ–Ω {types}"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\n2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    success = await add_trading_type(test_user_id, "futures")
    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–∏–µ futures: {success}")
    types = load_trading_types(test_user_id)
    print(f"   –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã: {types}")
    assert "futures" in types, f"futures –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ: {types}"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\n3. –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    success = await toggle_trading_type(test_user_id, "spot")
    print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ spot (—É–±—Ä–∞—Ç—å): {success}")
    types = load_trading_types(test_user_id)
    print(f"   –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã: {types}")
    assert types == ["futures"], f"–û–∂–∏–¥–∞–ª—Å—è ['futures'], –ø–æ–ª—É—á–µ–Ω {types}"
    
    success = await toggle_trading_type(test_user_id, "spot")
    print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ spot (–¥–æ–±–∞–≤–∏—Ç—å): {success}")
    types = load_trading_types(test_user_id)
    print(f"   –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã: {types}")
    assert "spot" in types and "futures" in types, f"–û–±–∞ —Ç–∏–ø–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ: {types}"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ —É–±—Ä–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø
    print("\n4. –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞:")
    await update_trading_types(test_user_id, ["spot"])  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ spot
    success = await toggle_trading_type(test_user_id, "spot")
    print(f"   –ü–æ–ø—ã—Ç–∫–∞ —É–±—Ä–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø: {success}")
    types = load_trading_types(test_user_id)
    print(f"   –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã: {types}")
    assert not success, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–±—Ä–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø"
    assert types == ["spot"], f"–î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è ['spot'], –ø–æ–ª—É—á–µ–Ω {types}"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    print("\n5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤:")
    success = await update_trading_types(test_user_id, ["spot", "futures"])
    print(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤: {success}")
    types = load_trading_types(test_user_id)
    print(f"   –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã: {types}")
    assert set(types) == {"spot", "futures"}, f"–û–∂–∏–¥–∞–ª–∏—Å—å –æ–±–∞ —Ç–∏–ø–∞, –ø–æ–ª—É—á–µ–Ω {types}"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("\n6. –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    settings = load_user_settings(test_user_id)
    print(f"   trading_type (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏): {settings['trading']['trading_type']}")
    print(f"   trading_types (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç): {settings['trading']['trading_types']}")
    assert settings['trading']['trading_type'] in settings['trading']['trading_types'], \
        "trading_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ trading_types"
    print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    settings_file = f"user_settings/{test_user_id}.json"
    if os.path.exists(settings_file):
        os.remove(settings_file)
        print(f"   –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {settings_file}")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def test_keyboard_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\nüéπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
    
    try:
        from keyboard.inline import trading_type_settings_inline
        
        # –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        keyboard = trading_type_settings_inline(999999)
        print("   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        assert keyboard.inline_keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏"
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫: {len(keyboard.inline_keyboard)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ toggle
        found_toggle = False
        for row in keyboard.inline_keyboard:
            for button in row:
                if "toggle_trading_type:" in button.callback_data:
                    found_toggle = True
                    break
        
        assert found_toggle, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ —Å toggle_trading_type:"
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
    except ImportError as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_multiple_trading_types())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    test_keyboard_functionality()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 