#!/usr/bin/env python3
import asyncio
import sys
import os
import sqlite3

sys.path.append('.')

async def check_db():
    from db.connect import connect
    
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    db_path = 'data/trading_data.db'
    if os.path.exists(db_path):
        print(f"‚úÖ SQLite —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {db_path}")
        
        sqlite_conn = sqlite3.connect(db_path)
        cursor = sqlite_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='orders'")
        result = cursor.fetchone()
        if result:
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã orders:")
            print(result[0])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute('PRAGMA table_info(orders)')
        columns = cursor.fetchall()
        print(f"\nüìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ orders ({len(columns)} –≤—Å–µ–≥–æ):")
        
        strategy_columns = []
        for col in columns:
            col_name = col[1]
            col_type = col[2]
            print(f"  ‚Ä¢ {col_name} ({col_type})")
            
            if col_name in ['price_action_active', 'price_action_pattern', 'cm_active', 
                           'moonbot_active', 'rsi_active', 'divergence_active', 'divergence_type']:
                strategy_columns.append(col_name)
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategy_columns)}")
        for col in strategy_columns:
            print(f"  ‚úÖ {col}")
        
        missing_strategy_columns = []
        expected_columns = ['price_action_active', 'price_action_pattern', 'cm_active', 
                           'moonbot_active', 'rsi_active', 'divergence_active', 'divergence_type']
        
        for expected in expected_columns:
            if expected not in strategy_columns:
                missing_strategy_columns.append(expected)
        
        if missing_strategy_columns:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {missing_strategy_columns}")
        else:
            print("\n‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        sqlite_conn.close()
    else:
        print(f"‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ wrapper
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ database wrapper ===")
    try:
        conn = await connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ wrapper —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–æ–Ω–∫–∞–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        for col in expected_columns:
            try:
                await conn.fetchval(f"SELECT {col} FROM orders LIMIT 1")
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col} –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ wrapper")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–µ {col}: {e}")
        
        await conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ wrapper: {e}")

if __name__ == "__main__":
    asyncio.run(check_db()) 