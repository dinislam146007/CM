#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MoonBot
"""

import asyncio
from user_settings import load_user_params, update_user_param, reset_user_params

async def test_moonbot_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MoonBot"""
    
    test_user_id = 12345
    
    print("=== –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ MoonBot ===\n")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print("1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    params = load_user_params(test_user_id)
    
    print(f"   üí∞ OrderSize: {params['OrderSize']}")
    print(f"   üìà TakeProfit: {params['TakeProfit']}%")
    print(f"   üìâ StopLoss: {params['StopLoss']}%")
    print(f"   üìä MinVolume: {params['MinVolume']}")
    print(f"   üìä MaxVolume: {params['MaxVolume']}")
    print(f"   üïê MinHourlyVolume: {params['MinHourlyVolume']}")
    print(f"   üïê MaxHourlyVolume: {params['MaxHourlyVolume']}")
    print(f"   üìà Delta_3h_Max: {params['Delta_3h_Max']}%")
    print(f"   üìà Delta_24h_Max: {params['Delta_24h_Max']}%")
    print(f"   ‚ö° Delta2_Max: {params['Delta2_Max']}%")
    print(f"   ‚Çø Delta_BTC_Min: {params['Delta_BTC_Min']}%")
    print(f"   ‚Çø Delta_BTC_Max: {params['Delta_BTC_Max']}%")
    print(f"   ‚õî CoinsBlackList: {params['CoinsBlackList']}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ Take Profit
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ Take Profit:")
    old_tp = params['TakeProfit']
    new_tp = 5.0
    
    success = await update_user_param(test_user_id, 'TakeProfit', new_tp)
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ TakeProfit —Å {old_tp}% –Ω–∞ {new_tp}%: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    updated_params = load_user_params(test_user_id)
    actual_tp = updated_params['TakeProfit']
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: TakeProfit = {actual_tp}% {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if actual_tp == new_tp else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    
    test_params = {
        'OrderSize': 100.0,
        'StopLoss': 2.0,
        'MinHourlyVolume': 2000000,
        'Delta_BTC_Max': 1.0
    }
    
    for param_name, new_value in test_params.items():
        old_value = updated_params[param_name]
        success = await update_user_param(test_user_id, param_name, new_value)
        print(f"   {param_name}: {old_value} ‚Üí {new_value} {'‚úÖ' if success else '‚ùå'}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    final_params = load_user_params(test_user_id)
    
    for param_name, expected_value in test_params.items():
        actual_value = final_params[param_name]
        status = "‚úÖ" if actual_value == expected_value else "‚ùå"
        print(f"   {param_name}: {actual_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value}) {status}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
    reset_success = await reset_user_params(test_user_id)
    print(f"   –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if reset_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã
    reset_params = load_user_params(test_user_id)
    tp_after_reset = reset_params['TakeProfit']
    print(f"   TakeProfit –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {tp_after_reset}% (–æ–∂–∏–¥–∞–ª–æ—Å—å 3.0%) {'‚úÖ' if tp_after_reset == 3.0 else '‚ùå'}")
    
    print("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")

if __name__ == "__main__":
    asyncio.run(test_moonbot_settings()) 