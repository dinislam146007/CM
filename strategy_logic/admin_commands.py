from aiogram import Bot, types, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from strategy_logic.trading_settings import load_trading_settings, update_trading_settings
from config import config
from strategy_logic.cm_notification_processor import test_send_notification

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
trading_router = Router()

@trading_router.message(Command("trading"))
async def cmd_trading_settings(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ message
    user_id = message.from_user.id
    await show_trading_settings(message, user_id)

@trading_router.message(Command("cm_test"))
async def cmd_cm_test(message: Message):
    """Test CM notification system"""
    # Check if the user is admin
    if message.from_user.id != config.admin_id:
        await message.answer("‚ùå This command is only available to admins.")
        return
    
    await message.answer("üß™ Starting CM notification system test...")
    
    # Run the test
    await test_send_notification()
    
    await message.answer("‚úÖ CM notification test completed. Check logs for results.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_trading_settings(message: types.Message, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    from user_settings import load_trading_types
    
    settings = load_trading_settings(user_id)
    trading_types = load_trading_types(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    text = f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏: <b>{', '.join([t.upper() for t in trading_types])}</b>\n"
    text += f"üîπ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: <b>x{settings['leverage']}</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data="change_trading_type")],
        [InlineKeyboardButton(text="üìà –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", callback_data="change_leverage")]
    ])
    
    await message.answer(text=text, reply_markup=keyboard)

@trading_router.callback_query(F.data == "change_trading_type")
async def process_callback_trading_type(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)"""
    from user_settings import load_trading_types
    from keyboard.inline import trading_type_settings_inline
    
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    current_types = load_trading_types(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([t.upper() for t in current_types])}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
    text += "SPOT - –æ–±—ã—á–Ω–∞—è —Å–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ –ø–ª–µ—á–∞\n"
    text += "FUTURES - —Ñ—å—é—á–µ—Ä—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ –∏ SHORT –ø–æ–∑–∏—Ü–∏–π"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    keyboard = trading_type_settings_inline(user_id)
    
    await callback_query.message.edit_text(text=text, reply_markup=keyboard)
    await callback_query.answer()

@trading_router.callback_query(F.data == "change_leverage")
async def process_callback_leverage(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
    user_id = callback_query.from_user.id
    settings = load_trading_settings(user_id)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø SPOT, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–ª–µ—á–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    if settings["trading_type"] == "spot":
        await callback_query.message.edit_text(
            text="‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è FUTURES —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ FUTURES.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_trading_settings")]
            ])
        )
        await callback_query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
    leverage_options = [1, 2, 3, 5, 10, 20, 50, 100]
    buttons = [InlineKeyboardButton(text=f"x{lev}", callback_data=f"set_leverage:{lev}") for lev in leverage_options]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫
    keyboard_buttons = []
    for i in range(0, len(buttons), 4):
        keyboard_buttons.append(buttons[i:i+4])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard_buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_trading_settings")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è FUTURES —Ç–æ—Ä–≥–æ–≤–ª–∏:\n"
        f"–¢–µ–∫—É—â–µ–µ –ø–ª–µ—á–æ: x{settings['leverage']}\n\n"
        f"‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã—Å–æ–∫–æ–µ –ø–ª–µ—á–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å, —Ç–∞–∫ –∏ —Ä–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.",
        reply_markup=keyboard
    )
    
    await callback_query.answer()

@trading_router.callback_query(F.data.startswith("set_trading_type:"))
async def process_callback_set_trading_type(callback_query: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    user_id = callback_query.from_user.id
    trading_type = callback_query.data.split(':')[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    update_trading_settings({"trading_type": trading_type}, user_id)
    
    # –ï—Å–ª–∏ —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ SPOT, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–µ—á–æ –Ω–∞ 1
    if trading_type == "spot":
        update_trading_settings({"leverage": 1}, user_id)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_trading_settings(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    from user_settings import load_trading_types
    current_types = load_trading_types(user_id)
    
    text = f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏: <b>{', '.join([t.upper() for t in current_types])}</b>\n"
    text += f"üîπ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: <b>x{settings['leverage']}</b>\n\n"
    
    if trading_type == "futures":
        text += "üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        text += "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ\n"
        text += "- –û—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏–∏\n\n"
    else:
        text += "üìä –†–µ–∂–∏–º SPOT:\n"
        text += "- –ë–µ–∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞\n"
        text += "- –¢–æ–ª—å–∫–æ LONG –ø–æ–∑–∏—Ü–∏–∏\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data="change_trading_type")],
        [InlineKeyboardButton(text="üìà –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", callback_data="change_leverage")]
    ])
    
    await callback_query.message.edit_text(text=text, reply_markup=keyboard)
    await callback_query.answer()

@trading_router.callback_query(F.data.startswith("toggle_trading_type:"))
async def process_callback_toggle_trading_type(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞)"""
    from user_settings import toggle_trading_type, load_trading_types
    from keyboard.inline import trading_type_settings_inline
    
    user_id = callback_query.from_user.id
    trading_type = callback_query.data.split(':')[1]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏
    success = await toggle_trading_type(user_id, trading_type)
    
    if not success:
        await callback_query.answer("‚ùå –ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    current_types = load_trading_types(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    text = "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([t.upper() for t in current_types])}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
    text += "SPOT - –æ–±—ã—á–Ω–∞—è —Å–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ –ø–ª–µ—á–∞\n"
    text += "FUTURES - —Ñ—å—é—á–µ—Ä—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞ –∏ SHORT –ø–æ–∑–∏—Ü–∏–π"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    keyboard = trading_type_settings_inline(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(text=text, reply_markup=keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if trading_type in current_types:
        await callback_query.answer(f"‚úÖ {trading_type.upper()} –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await callback_query.answer(f"‚ùå {trading_type.upper()} —É–±—Ä–∞–Ω")

@trading_router.callback_query(F.data.startswith("set_leverage:"))
async def process_callback_set_leverage(callback_query: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ"""
    user_id = callback_query.from_user.id
    leverage = int(callback_query.data.split(':')[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    update_trading_settings({"leverage": leverage}, user_id)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_trading_settings(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    from user_settings import load_trading_types
    current_types = load_trading_types(user_id)
    
    text = f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏: <b>{', '.join([t.upper() for t in current_types])}</b>\n"
    text += f"üîπ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: <b>x{settings['leverage']}</b>\n\n"
    
    if leverage > 1:
        text += f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
        text += f"- –ü—Ä–∏ –ø–ª–µ—á–µ x{leverage} –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ {leverage}\n"
        text += f"- –ï—Å–ª–∏ —É–±—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 100% –æ—Ç —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞, –ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data="change_trading_type")],
        [InlineKeyboardButton(text="üìà –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", callback_data="change_leverage")]
    ])
    
    await callback_query.message.edit_text(text=text, reply_markup=keyboard)
    await callback_query.answer()

@trading_router.callback_query(F.data == "back_to_trading_settings")
async def process_callback_back_to_settings(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback_query.from_user.id
    settings = load_trading_settings(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    from user_settings import load_trading_types
    current_types = load_trading_types(user_id)
    
    text = f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
    text += f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤–ª–∏: <b>{', '.join([t.upper() for t in current_types])}</b>\n"
    text += f"üîπ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: <b>x{settings['leverage']}</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data="change_trading_type")],
        [InlineKeyboardButton(text="üìà –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ", callback_data="change_leverage")]
    ])
    
    await callback_query.message.edit_text(text=text, reply_markup=keyboard)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_trading_settings_handlers(dp):
    dp.include_router(trading_router)
